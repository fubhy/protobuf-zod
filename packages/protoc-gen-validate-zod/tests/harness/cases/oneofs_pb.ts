// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/oneofs.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.TestOneOfMsg
 */
export class TestOneOfMsg extends Message<TestOneOfMsg> {
  /**
   * @generated from field: bool val = 1;
   */
  val = false;

  constructor(data?: PartialMessage<TestOneOfMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TestOneOfMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneOfMsg {
    return new TestOneOfMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneOfMsg {
    return new TestOneOfMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneOfMsg {
    return new TestOneOfMsg().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneOfMsg | PlainMessage<TestOneOfMsg> | undefined, b: TestOneOfMsg | PlainMessage<TestOneOfMsg> | undefined): boolean {
    return proto3.util.equals(TestOneOfMsg, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.OneOfNone
 */
export class OneOfNone extends Message<OneOfNone> {
  /**
   * @generated from oneof tests.harness.cases.OneOfNone.o
   */
  o: {
    /**
     * @generated from field: string x = 1;
     */
    value: string;
    case: "x";
  } | {
    /**
     * @generated from field: int32 y = 2;
     */
    value: number;
    case: "y";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OneOfNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.OneOfNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "o" },
    { no: 2, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneOfNone {
    return new OneOfNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneOfNone {
    return new OneOfNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneOfNone {
    return new OneOfNone().fromJsonString(jsonString, options);
  }

  static equals(a: OneOfNone | PlainMessage<OneOfNone> | undefined, b: OneOfNone | PlainMessage<OneOfNone> | undefined): boolean {
    return proto3.util.equals(OneOfNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.OneOf
 */
export class OneOf extends Message<OneOf> {
  /**
   * @generated from oneof tests.harness.cases.OneOf.o
   */
  o: {
    /**
     * @generated from field: string x = 1;
     */
    value: string;
    case: "x";
  } | {
    /**
     * @generated from field: int32 y = 2;
     */
    value: number;
    case: "y";
  } | {
    /**
     * @generated from field: tests.harness.cases.TestOneOfMsg z = 3;
     */
    value: TestOneOfMsg;
    case: "z";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OneOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.OneOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "o" },
    { no: 2, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
    { no: 3, name: "z", kind: "message", T: TestOneOfMsg, oneof: "o" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneOf {
    return new OneOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneOf {
    return new OneOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneOf {
    return new OneOf().fromJsonString(jsonString, options);
  }

  static equals(a: OneOf | PlainMessage<OneOf> | undefined, b: OneOf | PlainMessage<OneOf> | undefined): boolean {
    return proto3.util.equals(OneOf, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.OneOfRequired
 */
export class OneOfRequired extends Message<OneOfRequired> {
  /**
   * @generated from oneof tests.harness.cases.OneOfRequired.o
   */
  o: {
    /**
     * @generated from field: string x = 1;
     */
    value: string;
    case: "x";
  } | {
    /**
     * @generated from field: int32 y = 2;
     */
    value: number;
    case: "y";
  } | {
    /**
     * @generated from field: int32 name_with_underscores = 3;
     */
    value: number;
    case: "nameWithUnderscores";
  } | {
    /**
     * @generated from field: int32 under_and_1_number = 4;
     */
    value: number;
    case: "underAnd1Number";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OneOfRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.OneOfRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "o" },
    { no: 2, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
    { no: 3, name: "name_with_underscores", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
    { no: 4, name: "under_and_1_number", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneOfRequired {
    return new OneOfRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneOfRequired {
    return new OneOfRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneOfRequired {
    return new OneOfRequired().fromJsonString(jsonString, options);
  }

  static equals(a: OneOfRequired | PlainMessage<OneOfRequired> | undefined, b: OneOfRequired | PlainMessage<OneOfRequired> | undefined): boolean {
    return proto3.util.equals(OneOfRequired, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.OneOfIgnoreEmpty
 */
export class OneOfIgnoreEmpty extends Message<OneOfIgnoreEmpty> {
  /**
   * @generated from oneof tests.harness.cases.OneOfIgnoreEmpty.o
   */
  o: {
    /**
     * @generated from field: string x = 1;
     */
    value: string;
    case: "x";
  } | {
    /**
     * @generated from field: bytes y = 2;
     */
    value: Uint8Array;
    case: "y";
  } | {
    /**
     * @generated from field: int32 z = 3;
     */
    value: number;
    case: "z";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OneOfIgnoreEmpty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.OneOfIgnoreEmpty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "o" },
    { no: 2, name: "y", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "o" },
    { no: 3, name: "z", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneOfIgnoreEmpty {
    return new OneOfIgnoreEmpty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneOfIgnoreEmpty {
    return new OneOfIgnoreEmpty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneOfIgnoreEmpty {
    return new OneOfIgnoreEmpty().fromJsonString(jsonString, options);
  }

  static equals(a: OneOfIgnoreEmpty | PlainMessage<OneOfIgnoreEmpty> | undefined, b: OneOfIgnoreEmpty | PlainMessage<OneOfIgnoreEmpty> | undefined): boolean {
    return proto3.util.equals(OneOfIgnoreEmpty, a, b);
  }
}

