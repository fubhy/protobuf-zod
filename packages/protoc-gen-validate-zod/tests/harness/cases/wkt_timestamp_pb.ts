// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/wkt_timestamp.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.TimestampNone
 */
export class TimestampNone extends Message<TimestampNone> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampNone {
    return new TimestampNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampNone {
    return new TimestampNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampNone {
    return new TimestampNone().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampNone | PlainMessage<TimestampNone> | undefined, b: TimestampNone | PlainMessage<TimestampNone> | undefined): boolean {
    return proto3.util.equals(TimestampNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampRequired
 */
export class TimestampRequired extends Message<TimestampRequired> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampRequired {
    return new TimestampRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampRequired {
    return new TimestampRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampRequired {
    return new TimestampRequired().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampRequired | PlainMessage<TimestampRequired> | undefined, b: TimestampRequired | PlainMessage<TimestampRequired> | undefined): boolean {
    return proto3.util.equals(TimestampRequired, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampConst
 */
export class TimestampConst extends Message<TimestampConst> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampConst>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampConst";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampConst {
    return new TimestampConst().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampConst {
    return new TimestampConst().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampConst {
    return new TimestampConst().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampConst | PlainMessage<TimestampConst> | undefined, b: TimestampConst | PlainMessage<TimestampConst> | undefined): boolean {
    return proto3.util.equals(TimestampConst, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampLT
 */
export class TimestampLT extends Message<TimestampLT> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampLT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampLT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampLT {
    return new TimestampLT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampLT {
    return new TimestampLT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampLT {
    return new TimestampLT().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampLT | PlainMessage<TimestampLT> | undefined, b: TimestampLT | PlainMessage<TimestampLT> | undefined): boolean {
    return proto3.util.equals(TimestampLT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampLTE
 */
export class TimestampLTE extends Message<TimestampLTE> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampLTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampLTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampLTE {
    return new TimestampLTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampLTE {
    return new TimestampLTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampLTE {
    return new TimestampLTE().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampLTE | PlainMessage<TimestampLTE> | undefined, b: TimestampLTE | PlainMessage<TimestampLTE> | undefined): boolean {
    return proto3.util.equals(TimestampLTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampGT
 */
export class TimestampGT extends Message<TimestampGT> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampGT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampGT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampGT {
    return new TimestampGT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampGT {
    return new TimestampGT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampGT {
    return new TimestampGT().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampGT | PlainMessage<TimestampGT> | undefined, b: TimestampGT | PlainMessage<TimestampGT> | undefined): boolean {
    return proto3.util.equals(TimestampGT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampGTE
 */
export class TimestampGTE extends Message<TimestampGTE> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampGTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampGTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampGTE {
    return new TimestampGTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampGTE {
    return new TimestampGTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampGTE {
    return new TimestampGTE().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampGTE | PlainMessage<TimestampGTE> | undefined, b: TimestampGTE | PlainMessage<TimestampGTE> | undefined): boolean {
    return proto3.util.equals(TimestampGTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampGTLT
 */
export class TimestampGTLT extends Message<TimestampGTLT> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampGTLT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampGTLT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampGTLT {
    return new TimestampGTLT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampGTLT {
    return new TimestampGTLT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampGTLT {
    return new TimestampGTLT().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampGTLT | PlainMessage<TimestampGTLT> | undefined, b: TimestampGTLT | PlainMessage<TimestampGTLT> | undefined): boolean {
    return proto3.util.equals(TimestampGTLT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampExLTGT
 */
export class TimestampExLTGT extends Message<TimestampExLTGT> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampExLTGT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampExLTGT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampExLTGT {
    return new TimestampExLTGT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampExLTGT {
    return new TimestampExLTGT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampExLTGT {
    return new TimestampExLTGT().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampExLTGT | PlainMessage<TimestampExLTGT> | undefined, b: TimestampExLTGT | PlainMessage<TimestampExLTGT> | undefined): boolean {
    return proto3.util.equals(TimestampExLTGT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampGTELTE
 */
export class TimestampGTELTE extends Message<TimestampGTELTE> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampGTELTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampGTELTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampGTELTE {
    return new TimestampGTELTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampGTELTE {
    return new TimestampGTELTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampGTELTE {
    return new TimestampGTELTE().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampGTELTE | PlainMessage<TimestampGTELTE> | undefined, b: TimestampGTELTE | PlainMessage<TimestampGTELTE> | undefined): boolean {
    return proto3.util.equals(TimestampGTELTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampExGTELTE
 */
export class TimestampExGTELTE extends Message<TimestampExGTELTE> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampExGTELTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampExGTELTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampExGTELTE {
    return new TimestampExGTELTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampExGTELTE {
    return new TimestampExGTELTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampExGTELTE {
    return new TimestampExGTELTE().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampExGTELTE | PlainMessage<TimestampExGTELTE> | undefined, b: TimestampExGTELTE | PlainMessage<TimestampExGTELTE> | undefined): boolean {
    return proto3.util.equals(TimestampExGTELTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampLTNow
 */
export class TimestampLTNow extends Message<TimestampLTNow> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampLTNow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampLTNow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampLTNow {
    return new TimestampLTNow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampLTNow {
    return new TimestampLTNow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampLTNow {
    return new TimestampLTNow().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampLTNow | PlainMessage<TimestampLTNow> | undefined, b: TimestampLTNow | PlainMessage<TimestampLTNow> | undefined): boolean {
    return proto3.util.equals(TimestampLTNow, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampGTNow
 */
export class TimestampGTNow extends Message<TimestampGTNow> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampGTNow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampGTNow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampGTNow {
    return new TimestampGTNow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampGTNow {
    return new TimestampGTNow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampGTNow {
    return new TimestampGTNow().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampGTNow | PlainMessage<TimestampGTNow> | undefined, b: TimestampGTNow | PlainMessage<TimestampGTNow> | undefined): boolean {
    return proto3.util.equals(TimestampGTNow, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampWithin
 */
export class TimestampWithin extends Message<TimestampWithin> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampWithin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampWithin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampWithin {
    return new TimestampWithin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampWithin {
    return new TimestampWithin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampWithin {
    return new TimestampWithin().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampWithin | PlainMessage<TimestampWithin> | undefined, b: TimestampWithin | PlainMessage<TimestampWithin> | undefined): boolean {
    return proto3.util.equals(TimestampWithin, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampLTNowWithin
 */
export class TimestampLTNowWithin extends Message<TimestampLTNowWithin> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampLTNowWithin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampLTNowWithin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampLTNowWithin {
    return new TimestampLTNowWithin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampLTNowWithin {
    return new TimestampLTNowWithin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampLTNowWithin {
    return new TimestampLTNowWithin().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampLTNowWithin | PlainMessage<TimestampLTNowWithin> | undefined, b: TimestampLTNowWithin | PlainMessage<TimestampLTNowWithin> | undefined): boolean {
    return proto3.util.equals(TimestampLTNowWithin, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.TimestampGTNowWithin
 */
export class TimestampGTNowWithin extends Message<TimestampGTNowWithin> {
  /**
   * @generated from field: google.protobuf.Timestamp val = 1;
   */
  val?: Timestamp;

  constructor(data?: PartialMessage<TimestampGTNowWithin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TimestampGTNowWithin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampGTNowWithin {
    return new TimestampGTNowWithin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampGTNowWithin {
    return new TimestampGTNowWithin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampGTNowWithin {
    return new TimestampGTNowWithin().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampGTNowWithin | PlainMessage<TimestampGTNowWithin> | undefined, b: TimestampGTNowWithin | PlainMessage<TimestampGTNowWithin> | undefined): boolean {
    return proto3.util.equals(TimestampGTNowWithin, a, b);
  }
}

