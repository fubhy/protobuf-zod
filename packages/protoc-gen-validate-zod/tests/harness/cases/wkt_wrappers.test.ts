// @generated by protoc-gen-validate-zod-test v0.0.1-dev with parameter "target=ts,cases=packages/protoc-gen-validate-zod/tests/cases.txt"
// @generated from file tests/harness/cases/wkt_wrappers.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {expect, it} from "vitest";
import {WrapperBool, WrapperBytes, WrapperDouble, WrapperFloat, WrapperInt32, WrapperInt64, WrapperNone, WrapperOptionalUuidString, WrapperRequiredEmptyString, WrapperRequiredFloat, WrapperRequiredString, WrapperString, WrapperUInt32, WrapperUInt64} from "./wkt_wrappers_pb.js";
import {WrapperBoolSchema, WrapperBytesSchema, WrapperDoubleSchema, WrapperFloatSchema, WrapperInt32Schema, WrapperInt64Schema, WrapperNoneSchema, WrapperOptionalUuidStringSchema, WrapperRequiredEmptyStringSchema, WrapperRequiredFloatSchema, WrapperRequiredStringSchema, WrapperStringSchema, WrapperUInt32Schema, WrapperUInt64Schema} from "./wkt_wrappers_zod.js";

it("wrapper - none - valid", () => {
  const message = WrapperNone.fromJson({"val":123});
  expect(message).toBeValid(WrapperNoneSchema);
});

it("wrapper - none - valid (empty)", () => {
  const message = WrapperNone.fromJson({});
  expect(message).toBeValid(WrapperNoneSchema);
});

it("wrapper - float - valid", () => {
  const message = WrapperFloat.fromJson({"val":1});
  expect(message).toBeValid(WrapperFloatSchema);
});

it("wrapper - float - valid (empty)", () => {
  const message = WrapperFloat.fromJson({});
  expect(message).toBeValid(WrapperFloatSchema);
});

it("wrapper - float - invalid", () => {
  const message = WrapperFloat.fromJson({"val":0});
  expect(message).toBeInvalid(WrapperFloatSchema, 1);
});

it("wrapper - double - valid", () => {
  const message = WrapperDouble.fromJson({"val":1});
  expect(message).toBeValid(WrapperDoubleSchema);
});

it("wrapper - double - valid (empty)", () => {
  const message = WrapperDouble.fromJson({});
  expect(message).toBeValid(WrapperDoubleSchema);
});

it("wrapper - double - invalid", () => {
  const message = WrapperDouble.fromJson({"val":0});
  expect(message).toBeInvalid(WrapperDoubleSchema, 1);
});

it("wrapper - int64 - valid", () => {
  const message = WrapperInt64.fromJson({"val":"1"});
  expect(message).toBeValid(WrapperInt64Schema);
});

it("wrapper - int64 - valid (empty)", () => {
  const message = WrapperInt64.fromJson({});
  expect(message).toBeValid(WrapperInt64Schema);
});

it("wrapper - int64 - invalid", () => {
  const message = WrapperInt64.fromJson({"val":"0"});
  expect(message).toBeInvalid(WrapperInt64Schema, 1);
});

it("wrapper - int32 - valid", () => {
  const message = WrapperInt32.fromJson({"val":1});
  expect(message).toBeValid(WrapperInt32Schema);
});

it("wrapper - int32 - valid (empty)", () => {
  const message = WrapperInt32.fromJson({});
  expect(message).toBeValid(WrapperInt32Schema);
});

it("wrapper - int32 - invalid", () => {
  const message = WrapperInt32.fromJson({"val":0});
  expect(message).toBeInvalid(WrapperInt32Schema, 1);
});

it("wrapper - uint64 - valid", () => {
  const message = WrapperUInt64.fromJson({"val":"1"});
  expect(message).toBeValid(WrapperUInt64Schema);
});

it("wrapper - uint64 - valid (empty)", () => {
  const message = WrapperUInt64.fromJson({});
  expect(message).toBeValid(WrapperUInt64Schema);
});

it("wrapper - uint64 - invalid", () => {
  const message = WrapperUInt64.fromJson({"val":"0"});
  expect(message).toBeInvalid(WrapperUInt64Schema, 1);
});

it("wrapper - uint32 - valid", () => {
  const message = WrapperUInt32.fromJson({"val":1});
  expect(message).toBeValid(WrapperUInt32Schema);
});

it("wrapper - uint32 - valid (empty)", () => {
  const message = WrapperUInt32.fromJson({});
  expect(message).toBeValid(WrapperUInt32Schema);
});

it("wrapper - uint32 - invalid", () => {
  const message = WrapperUInt32.fromJson({"val":0});
  expect(message).toBeInvalid(WrapperUInt32Schema, 1);
});

it("wrapper - bool - valid", () => {
  const message = WrapperBool.fromJson({"val":true});
  expect(message).toBeValid(WrapperBoolSchema);
});

it("wrapper - bool - valid (empty)", () => {
  const message = WrapperBool.fromJson({});
  expect(message).toBeValid(WrapperBoolSchema);
});

it("wrapper - bool - invalid", () => {
  const message = WrapperBool.fromJson({"val":false});
  expect(message).toBeInvalid(WrapperBoolSchema, 1);
});

it("wrapper - string - valid", () => {
  const message = WrapperString.fromJson({"val":"foobar"});
  expect(message).toBeValid(WrapperStringSchema);
});

it("wrapper - string - valid (empty)", () => {
  const message = WrapperString.fromJson({});
  expect(message).toBeValid(WrapperStringSchema);
});

it("wrapper - string - invalid", () => {
  const message = WrapperString.fromJson({"val":"fizzbuzz"});
  expect(message).toBeInvalid(WrapperStringSchema, 1);
});

it("wrapper - bytes - valid", () => {
  const message = WrapperBytes.fromJson({"val":"Zm9v"});
  expect(message).toBeValid(WrapperBytesSchema);
});

it("wrapper - bytes - valid (empty)", () => {
  const message = WrapperBytes.fromJson({});
  expect(message).toBeValid(WrapperBytesSchema);
});

it("wrapper - bytes - invalid", () => {
  const message = WrapperBytes.fromJson({"val":"eA=="});
  expect(message).toBeInvalid(WrapperBytesSchema, 1);
});

it("wrapper - required - string - valid", () => {
  const message = WrapperRequiredString.fromJson({"val":"bar"});
  expect(message).toBeValid(WrapperRequiredStringSchema);
});

it("wrapper - required - string - invalid", () => {
  const message = WrapperRequiredString.fromJson({"val":"foo"});
  expect(message).toBeInvalid(WrapperRequiredStringSchema, 1);
});

it("wrapper - required - string - invalid (empty)", () => {
  const message = WrapperRequiredString.fromJson({});
  expect(message).toBeInvalid(WrapperRequiredStringSchema, 1);
});

it("wrapper - required - string (empty) - valid", () => {
  const message = WrapperRequiredEmptyString.fromJson({"val":""});
  expect(message).toBeValid(WrapperRequiredEmptyStringSchema);
});

it("wrapper - required - string (empty) - invalid", () => {
  const message = WrapperRequiredEmptyString.fromJson({"val":"foo"});
  expect(message).toBeInvalid(WrapperRequiredEmptyStringSchema, 1);
});

it("wrapper - required - string (empty) - invalid (empty)", () => {
  const message = WrapperRequiredEmptyString.fromJson({});
  expect(message).toBeInvalid(WrapperRequiredEmptyStringSchema, 1);
});

it("wrapper - optional - string (uuid) - valid", () => {
  const message = WrapperOptionalUuidString.fromJson({"val":"8b72987b-024a-43b3-b4cf-647a1f925c5d"});
  expect(message).toBeValid(WrapperOptionalUuidStringSchema);
});

it("wrapper - optional - string (uuid) - valid (empty)", () => {
  const message = WrapperOptionalUuidString.fromJson({});
  expect(message).toBeValid(WrapperOptionalUuidStringSchema);
});

it("wrapper - optional - string (uuid) - invalid", () => {
  const message = WrapperOptionalUuidString.fromJson({"val":"foo"});
  expect(message).toBeInvalid(WrapperOptionalUuidStringSchema, 1);
});

it("wrapper - required - float - valid", () => {
  const message = WrapperRequiredFloat.fromJson({"val":1});
  expect(message).toBeValid(WrapperRequiredFloatSchema);
});

it("wrapper - required - float - invalid", () => {
  const message = WrapperRequiredFloat.fromJson({"val":-5});
  expect(message).toBeInvalid(WrapperRequiredFloatSchema, 1);
});

it("wrapper - required - float - invalid (empty)", () => {
  const message = WrapperRequiredFloat.fromJson({});
  expect(message).toBeInvalid(WrapperRequiredFloatSchema, 1);
});
