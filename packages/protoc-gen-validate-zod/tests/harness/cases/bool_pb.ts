// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/bool.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.BoolNone
 */
export class BoolNone extends Message<BoolNone> {
  /**
   * @generated from field: bool val = 1;
   */
  val = false;

  constructor(data?: PartialMessage<BoolNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.BoolNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoolNone {
    return new BoolNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoolNone {
    return new BoolNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoolNone {
    return new BoolNone().fromJsonString(jsonString, options);
  }

  static equals(a: BoolNone | PlainMessage<BoolNone> | undefined, b: BoolNone | PlainMessage<BoolNone> | undefined): boolean {
    return proto3.util.equals(BoolNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.BoolConstTrue
 */
export class BoolConstTrue extends Message<BoolConstTrue> {
  /**
   * @generated from field: bool val = 1;
   */
  val = false;

  constructor(data?: PartialMessage<BoolConstTrue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.BoolConstTrue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoolConstTrue {
    return new BoolConstTrue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoolConstTrue {
    return new BoolConstTrue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoolConstTrue {
    return new BoolConstTrue().fromJsonString(jsonString, options);
  }

  static equals(a: BoolConstTrue | PlainMessage<BoolConstTrue> | undefined, b: BoolConstTrue | PlainMessage<BoolConstTrue> | undefined): boolean {
    return proto3.util.equals(BoolConstTrue, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.BoolConstFalse
 */
export class BoolConstFalse extends Message<BoolConstFalse> {
  /**
   * @generated from field: bool val = 1;
   */
  val = false;

  constructor(data?: PartialMessage<BoolConstFalse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.BoolConstFalse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoolConstFalse {
    return new BoolConstFalse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoolConstFalse {
    return new BoolConstFalse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoolConstFalse {
    return new BoolConstFalse().fromJsonString(jsonString, options);
  }

  static equals(a: BoolConstFalse | PlainMessage<BoolConstFalse> | undefined, b: BoolConstFalse | PlainMessage<BoolConstFalse> | undefined): boolean {
    return proto3.util.equals(BoolConstFalse, a, b);
  }
}

