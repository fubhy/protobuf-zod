// @generated by protoc-gen-validate-zod-test v0.0.1-dev with parameter "target=ts,cases=packages/protoc-gen-validate-zod/tests/cases.txt"
// @generated from file tests/harness/cases/wkt_timestamp.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {expect, it} from "vitest";
import {TimestampConst, TimestampExGTELTE, TimestampExLTGT, TimestampGT, TimestampGTE, TimestampGTELTE, TimestampGTLT, TimestampGTNow, TimestampGTNowWithin, TimestampLT, TimestampLTE, TimestampLTNow, TimestampLTNowWithin, TimestampNone, TimestampRequired, TimestampWithin} from "./wkt_timestamp_pb.js";
import {TimestampConstSchema, TimestampExGTELTESchema, TimestampExLTGTSchema, TimestampGTELTESchema, TimestampGTESchema, TimestampGTLTSchema, TimestampGTNowSchema, TimestampGTNowWithinSchema, TimestampGTSchema, TimestampLTESchema, TimestampLTNowSchema, TimestampLTNowWithinSchema, TimestampLTSchema, TimestampNoneSchema, TimestampRequiredSchema, TimestampWithinSchema} from "./wkt_timestamp_zod.js";

it("timestamp - none - valid", () => {
  const message = TimestampNone.fromJson({"val":"1970-01-01T00:02:03Z"});
  expect(message).toBeValid(TimestampNoneSchema);
});

it("timestamp - required - valid", () => {
  const message = TimestampRequired.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeValid(TimestampRequiredSchema);
});

it("timestamp - required - invalid", () => {
  const message = TimestampRequired.fromJson({});
  expect(message).toBeInvalid(TimestampRequiredSchema, 1);
});

it("timestamp - const - valid", () => {
  const message = TimestampConst.fromJson({"val":"1970-01-01T00:00:03Z"});
  expect(message).toBeValid(TimestampConstSchema);
});

it("timestamp - const - valid (empty)", () => {
  const message = TimestampConst.fromJson({});
  expect(message).toBeValid(TimestampConstSchema);
});

it("timestamp - const - invalid", () => {
  const message = TimestampConst.fromJson({"val":"1970-01-01T00:00:00.000000003Z"});
  expect(message).toBeInvalid(TimestampConstSchema, 1);
});

it("timestamp - lt - valid", () => {
  const message = TimestampLT.fromJson({"val":"1969-12-31T23:59:59Z"});
  expect(message).toBeValid(TimestampLTSchema);
});

it("timestamp - lt - valid (empty)", () => {
  const message = TimestampLT.fromJson({});
  expect(message).toBeValid(TimestampLTSchema);
});

it("timestamp - lt - invalid (equal)", () => {
  const message = TimestampLT.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeInvalid(TimestampLTSchema, 1);
});

it("timestamp - lt - invalid", () => {
  const message = TimestampLT.fromJson({"val":"1970-01-01T00:00:01Z"});
  expect(message).toBeInvalid(TimestampLTSchema, 1);
});

it("timestamp - lte - valid", () => {
  const message = TimestampLTE.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeValid(TimestampLTESchema);
});

it("timestamp - lte - valid (empty)", () => {
  const message = TimestampLTE.fromJson({});
  expect(message).toBeValid(TimestampLTESchema);
});

it("timestamp - lte - valid (equal)", () => {
  const message = TimestampLTE.fromJson({"val":"1970-01-01T00:00:01Z"});
  expect(message).toBeValid(TimestampLTESchema);
});

it("timestamp - lte - invalid", () => {
  const message = TimestampLTE.fromJson({"val":"1970-01-01T00:00:01.000000001Z"});
  expect(message).toBeInvalid(TimestampLTESchema, 1);
});

it("timestamp - gt - valid", () => {
  const message = TimestampGT.fromJson({"val":"1970-01-01T00:00:01Z"});
  expect(message).toBeValid(TimestampGTSchema);
});

it("timestamp - gt - valid (empty)", () => {
  const message = TimestampGT.fromJson({});
  expect(message).toBeValid(TimestampGTSchema);
});

it("timestamp - gt - invalid (equal)", () => {
  const message = TimestampGT.fromJson({"val":"1970-01-01T00:00:00.000001Z"});
  expect(message).toBeInvalid(TimestampGTSchema, 1);
});

it("timestamp - gt - invalid", () => {
  const message = TimestampGT.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeInvalid(TimestampGTSchema, 1);
});

it("timestamp - gte - valid", () => {
  const message = TimestampGTE.fromJson({"val":"1970-01-01T00:00:03Z"});
  expect(message).toBeValid(TimestampGTESchema);
});

it("timestamp - gte - valid (empty)", () => {
  const message = TimestampGTE.fromJson({});
  expect(message).toBeValid(TimestampGTESchema);
});

it("timestamp - gte - valid (equal)", () => {
  const message = TimestampGTE.fromJson({"val":"1970-01-01T00:00:00.001Z"});
  expect(message).toBeValid(TimestampGTESchema);
});

it("timestamp - gte - invalid", () => {
  const message = TimestampGTE.fromJson({"val":"1969-12-31T23:59:59Z"});
  expect(message).toBeInvalid(TimestampGTESchema, 1);
});

it("timestamp - gt & lt - valid", () => {
  const message = TimestampGTLT.fromJson({"val":"1970-01-01T00:00:00.000001Z"});
  expect(message).toBeValid(TimestampGTLTSchema);
});

it("timestamp - gt & lt - valid (empty)", () => {
  const message = TimestampGTLT.fromJson({});
  expect(message).toBeValid(TimestampGTLTSchema);
});

it("timestamp - gt & lt - invalid (above)", () => {
  const message = TimestampGTLT.fromJson({"val":"1970-01-01T00:16:40Z"});
  expect(message).toBeInvalid(TimestampGTLTSchema, 1);
});

it("timestamp - gt & lt - invalid (below)", () => {
  const message = TimestampGTLT.fromJson({"val":"1969-12-31T23:43:20Z"});
  expect(message).toBeInvalid(TimestampGTLTSchema, 1);
});

it("timestamp - gt & lt - invalid (max)", () => {
  const message = TimestampGTLT.fromJson({"val":"1970-01-01T00:00:01Z"});
  expect(message).toBeInvalid(TimestampGTLTSchema, 1);
});

it("timestamp - gt & lt - invalid (min)", () => {
  const message = TimestampGTLT.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeInvalid(TimestampGTLTSchema, 1);
});

it("timestamp - exclusive gt & lt - valid (empty)", () => {
  const message = TimestampExLTGT.fromJson({});
  expect(message).toBeValid(TimestampExLTGTSchema);
});

it("timestamp - exclusive gt & lt - valid (above)", () => {
  const message = TimestampExLTGT.fromJson({"val":"1970-01-01T00:00:02Z"});
  expect(message).toBeValid(TimestampExLTGTSchema);
});

it("timestamp - exclusive gt & lt - valid (below)", () => {
  const message = TimestampExLTGT.fromJson({"val":"1969-12-31T23:59:59Z"});
  expect(message).toBeValid(TimestampExLTGTSchema);
});

it("timestamp - exclusive gt & lt - invalid", () => {
  const message = TimestampExLTGT.fromJson({"val":"1970-01-01T00:00:00.000001Z"});
  expect(message).toBeInvalid(TimestampExLTGTSchema, 1);
});

it("timestamp - exclusive gt & lt - invalid (max)", () => {
  const message = TimestampExLTGT.fromJson({"val":"1970-01-01T00:00:01Z"});
  expect(message).toBeInvalid(TimestampExLTGTSchema, 1);
});

it("timestamp - exclusive gt & lt - invalid (min)", () => {
  const message = TimestampExLTGT.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeInvalid(TimestampExLTGTSchema, 1);
});

it("timestamp - gte & lte - valid", () => {
  const message = TimestampGTELTE.fromJson({"val":"1970-01-01T00:01:00.000000001Z"});
  expect(message).toBeValid(TimestampGTELTESchema);
});

it("timestamp - gte & lte - valid (empty)", () => {
  const message = TimestampGTELTE.fromJson({});
  expect(message).toBeValid(TimestampGTELTESchema);
});

it("timestamp - gte & lte - valid (max)", () => {
  const message = TimestampGTELTE.fromJson({"val":"1970-01-01T01:00:00Z"});
  expect(message).toBeValid(TimestampGTELTESchema);
});

it("timestamp - gte & lte - valid (min)", () => {
  const message = TimestampGTELTE.fromJson({"val":"1970-01-01T00:01:00Z"});
  expect(message).toBeValid(TimestampGTELTESchema);
});

it("timestamp - gte & lte - invalid (above)", () => {
  const message = TimestampGTELTE.fromJson({"val":"1970-01-01T01:00:00.000000001Z"});
  expect(message).toBeInvalid(TimestampGTELTESchema, 1);
});

it("timestamp - gte & lte - invalid (below)", () => {
  const message = TimestampGTELTE.fromJson({"val":"1970-01-01T00:00:59Z"});
  expect(message).toBeInvalid(TimestampGTELTESchema, 1);
});

it("timestamp - gte & lte - valid (empty)", () => {
  const message = TimestampExGTELTE.fromJson({});
  expect(message).toBeValid(TimestampExGTELTESchema);
});

it("timestamp - exclusive gte & lte - valid (above)", () => {
  const message = TimestampExGTELTE.fromJson({"val":"1970-01-01T01:00:01Z"});
  expect(message).toBeValid(TimestampExGTELTESchema);
});

it("timestamp - exclusive gte & lte - valid (below)", () => {
  const message = TimestampExGTELTE.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeValid(TimestampExGTELTESchema);
});

it("timestamp - exclusive gte & lte - valid (max)", () => {
  const message = TimestampExGTELTE.fromJson({"val":"1970-01-01T01:00:00Z"});
  expect(message).toBeValid(TimestampExGTELTESchema);
});

it("timestamp - exclusive gte & lte - valid (min)", () => {
  const message = TimestampExGTELTE.fromJson({"val":"1970-01-01T00:01:00Z"});
  expect(message).toBeValid(TimestampExGTELTESchema);
});

it("timestamp - exclusive gte & lte - invalid", () => {
  const message = TimestampExGTELTE.fromJson({"val":"1970-01-01T00:01:01Z"});
  expect(message).toBeInvalid(TimestampExGTELTESchema, 1);
});

it("timestamp - lt now - valid", () => {
  const message = TimestampLTNow.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeValid(TimestampLTNowSchema);
});

it("timestamp - lt now - valid (empty)", () => {
  const message = TimestampLTNow.fromJson({});
  expect(message).toBeValid(TimestampLTNowSchema);
});

it("timestamp - lt now - invalid", () => {
  const message = TimestampLTNow.fromJson({"val":"2022-10-29T10:02:47Z"});
  expect(message).toBeInvalid(TimestampLTNowSchema, 1);
});

it("timestamp - gt now - valid", () => {
  const message = TimestampGTNow.fromJson({"val":"2022-10-29T10:02:47Z"});
  expect(message).toBeValid(TimestampGTNowSchema);
});

it("timestamp - gt now - valid (empty)", () => {
  const message = TimestampGTNow.fromJson({});
  expect(message).toBeValid(TimestampGTNowSchema);
});

it("timestamp - gt now - invalid", () => {
  const message = TimestampGTNow.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeInvalid(TimestampGTNowSchema, 1);
});

it("timestamp - within - valid", () => {
  const message = TimestampWithin.fromJson({"val":"2022-10-29T08:02:47.302817500Z"});
  expect(message).toBeValid(TimestampWithinSchema);
});

it("timestamp - within - valid (empty)", () => {
  const message = TimestampWithin.fromJson({});
  expect(message).toBeValid(TimestampWithinSchema);
});

it("timestamp - within - invalid (below)", () => {
  const message = TimestampWithin.fromJson({"val":"1970-01-01T00:00:00Z"});
  expect(message).toBeInvalid(TimestampWithinSchema, 1);
});

it("timestamp - within - invalid (above)", () => {
  const message = TimestampWithin.fromJson({"val":"2022-10-29T10:02:47Z"});
  expect(message).toBeInvalid(TimestampWithinSchema, 1);
});

it("timestamp - lt now within - valid", () => {
  const message = TimestampLTNowWithin.fromJson({"val":"2022-10-29T07:32:47Z"});
  expect(message).toBeValid(TimestampLTNowWithinSchema);
});

it("timestamp - lt now within - valid (empty)", () => {
  const message = TimestampLTNowWithin.fromJson({});
  expect(message).toBeValid(TimestampLTNowWithinSchema);
});

it("timestamp - lt now within - invalid (lt)", () => {
  const message = TimestampLTNowWithin.fromJson({"val":"2022-10-29T08:32:47Z"});
  expect(message).toBeInvalid(TimestampLTNowWithinSchema, 1);
});

it("timestamp - lt now within - invalid (within)", () => {
  const message = TimestampLTNowWithin.fromJson({"val":"2022-10-29T06:02:47Z"});
  expect(message).toBeInvalid(TimestampLTNowWithinSchema, 1);
});

it("timestamp - gt now within - valid", () => {
  const message = TimestampGTNowWithin.fromJson({"val":"2022-10-29T08:32:47Z"});
  expect(message).toBeValid(TimestampGTNowWithinSchema);
});

it("timestamp - gt now within - valid (empty)", () => {
  const message = TimestampGTNowWithin.fromJson({});
  expect(message).toBeValid(TimestampGTNowWithinSchema);
});

it("timestamp - gt now within - invalid (gt)", () => {
  const message = TimestampGTNowWithin.fromJson({"val":"2022-10-29T07:32:47Z"});
  expect(message).toBeInvalid(TimestampGTNowWithinSchema, 1);
});

it("timestamp - gt now within - invalid (within)", () => {
  const message = TimestampGTNowWithin.fromJson({"val":"2022-10-29T10:02:47Z"});
  expect(message).toBeInvalid(TimestampGTNowWithinSchema, 1);
});
