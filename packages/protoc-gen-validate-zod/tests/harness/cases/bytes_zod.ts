// @generated by protoc-gen-validate-zod v0.0.1-dev with parameter "target=ts"
// @generated from file tests/harness/cases/bytes.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { z } from "zod";
import {
  bytes,
  bytesContains,
  bytesEndsWith,
  bytesEquals,
  bytesIsIn,
  bytesIsNotIn,
  bytesLength,
  bytesMaxLength,
  bytesMinLength,
  bytesStartsWith,
} from "protobuf-zod";

/**
 * @generated from message tests.harness.cases.BytesNone
 */
export const BytesNoneSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   */
  val: bytes,
});

/**
 * @generated from message tests.harness.cases.BytesConst
 */
export const BytesConstSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"const":"Zm9v"}}
   */
  val: bytes.refine(bytesEquals(new Uint8Array([0x66, 0x6f, 0x6f]))),
});

/**
 * @generated from message tests.harness.cases.BytesIn
 */
export const BytesInSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"in":["YmFy","YmF6"]}}
   */
  val: bytes.refine(bytesIsIn([new Uint8Array([0x62, 0x61, 0x72]), new Uint8Array([0x62, 0x61, 0x7a])])),
});

/**
 * @generated from message tests.harness.cases.BytesNotIn
 */
export const BytesNotInSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"notIn":["Zml6eg==","YnV6eg=="]}}
   */
  val: bytes.refine(bytesIsNotIn([new Uint8Array([0x66, 0x69, 0x7a, 0x7a]), new Uint8Array([0x62, 0x75, 0x7a, 0x7a])])),
});

/**
 * @generated from message tests.harness.cases.BytesLen
 */
export const BytesLenSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"len":"3"}}
   */
  val: bytes.refine(bytesLength(3)),
});

/**
 * @generated from message tests.harness.cases.BytesMinLen
 */
export const BytesMinLenSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"minLen":"3"}}
   */
  val: bytes.refine(bytesMinLength(3)),
});

/**
 * @generated from message tests.harness.cases.BytesMaxLen
 */
export const BytesMaxLenSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"maxLen":"5"}}
   */
  val: bytes.refine(bytesMaxLength(5)),
});

/**
 * @generated from message tests.harness.cases.BytesMinMaxLen
 */
export const BytesMinMaxLenSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"minLen":"3","maxLen":"5"}}
   */
  val: bytes.refine(bytesMaxLength(5)).refine(bytesMinLength(3)),
});

/**
 * @generated from message tests.harness.cases.BytesEqualMinMaxLen
 */
export const BytesEqualMinMaxLenSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"minLen":"5","maxLen":"5"}}
   */
  val: bytes.refine(bytesMaxLength(5)).refine(bytesMinLength(5)),
});

/**
 * @generated from message tests.harness.cases.BytesPattern
 */
export const BytesPatternSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"pattern":"^[\u0000-]+$"}}
   */
  val: bytes,
});

/**
 * @generated from message tests.harness.cases.BytesPrefix
 */
export const BytesPrefixSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"prefix":"mQ=="}}
   */
  val: bytes.refine(bytesStartsWith(new Uint8Array([0x99]))),
});

/**
 * @generated from message tests.harness.cases.BytesContains
 */
export const BytesContainsSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"contains":"YmFy"}}
   */
  val: bytes.refine(bytesContains(new Uint8Array([0x62, 0x61, 0x72]))),
});

/**
 * @generated from message tests.harness.cases.BytesSuffix
 */
export const BytesSuffixSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"suffix":"YnV6eg=="}}
   */
  val: bytes.refine(bytesEndsWith(new Uint8Array([0x62, 0x75, 0x7a, 0x7a]))),
});

/**
 * @generated from message tests.harness.cases.BytesIP
 */
export const BytesIPSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"ip":true}}
   */
  val: bytes,
});

/**
 * @generated from message tests.harness.cases.BytesIPv4
 */
export const BytesIPv4Schema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"ipv4":true}}
   */
  val: bytes,
});

/**
 * @generated from message tests.harness.cases.BytesIPv6
 */
export const BytesIPv6Schema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"ipv6":true}}
   */
  val: bytes,
});

/**
 * @generated from message tests.harness.cases.BytesIPv6Ignore
 */
export const BytesIPv6IgnoreSchema = z.object({
  /**
   * @generated from field: bytes val = 1;
   * @validate  {"bytes":{"ipv6":true,"ignoreEmpty":true}}
   */
  val: bytes.refine(bytesLength(0)).or(bytes),
});
