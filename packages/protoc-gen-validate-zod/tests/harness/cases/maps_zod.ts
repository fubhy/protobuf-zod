// @generated by protoc-gen-validate-zod v0.0.1-dev with parameter "target=ts"
// @generated from file tests/harness/cases/maps.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { z } from "zod";
import { double, float, int32, int64, map, numberGt, numberLt, regexp, sint64, uint32, uint64 } from "protobuf-zod";
import { protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.MapNone
 */
export const MapNoneSchema = z.object({
  /**
   * @generated from field: map<uint32, bool> val = 1;
   */
  val: map(uint32, z.boolean()),
});

/**
 * @generated from message tests.harness.cases.MapMin
 */
export const MapMinSchema = z.object({
  /**
   * @generated from field: map<int32, float> val = 1;
   * @validate  {"map":{"minPairs":"2"}}
   */
  val: map(int32, float),
});

/**
 * @generated from message tests.harness.cases.MapMax
 */
export const MapMaxSchema = z.object({
  /**
   * @generated from field: map<int64, double> val = 1;
   * @validate  {"map":{"maxPairs":"3"}}
   */
  val: map(int64, double),
});

/**
 * @generated from message tests.harness.cases.MapMinMax
 */
export const MapMinMaxSchema = z.object({
  /**
   * @generated from field: map<string, bool> val = 1;
   * @validate  {"map":{"minPairs":"2","maxPairs":"4"}}
   */
  val: map(z.string(), z.boolean()),
});

/**
 * @generated from message tests.harness.cases.MapExact
 */
export const MapExactSchema = z.object({
  /**
   * @generated from field: map<uint64, string> val = 1;
   * @validate  {"map":{"minPairs":"3","maxPairs":"3"}}
   */
  val: map(uint64, z.string()),
});

/**
 * @generated from message tests.harness.cases.MapNoSparse.Msg
 */
export const MapNoSparse_MsgSchema = z.object({});

/**
 * @generated from message tests.harness.cases.MapNoSparse
 */
export const MapNoSparseSchema = z.object({
  /**
   * @generated from field: map<uint32, tests.harness.cases.MapNoSparse.Msg> val = 1;
   * @validate  {"map":{"noSparse":true}}
   */
  val: map(uint32, z.lazy(() => MapNoSparse_MsgSchema).nullish()),
});

/**
 * @generated from message tests.harness.cases.MapKeys
 */
export const MapKeysSchema = z.object({
  /**
   * @generated from field: map<sint64, string> val = 1;
   * @validate  {"map":{"keys":{"sint64":{"lt":"0"}}}}
   */
  val: map(sint64.refine(numberLt(protoInt64.zero)), z.string()),
});

/**
 * @generated from message tests.harness.cases.MapValues
 */
export const MapValuesSchema = z.object({
  /**
   * @generated from field: map<string, string> val = 1;
   * @validate  {"map":{"values":{"string":{"minLen":"3"}}}}
   */
  val: map(z.string(), z.string().min(3)),
});

/**
 * @generated from message tests.harness.cases.MapKeysPattern
 */
export const MapKeysPatternSchema = z.object({
  /**
   * @generated from field: map<string, string> val = 1;
   * @validate  {"map":{"keys":{"string":{"pattern":"(?i)^[a-z0-9]+$"}}}}
   */
  val: map(z.string().regex(regexp("(?i)^[a-z0-9]+$")), z.string()),
});

/**
 * @generated from message tests.harness.cases.MapValuesPattern
 */
export const MapValuesPatternSchema = z.object({
  /**
   * @generated from field: map<string, string> val = 1;
   * @validate  {"map":{"values":{"string":{"pattern":"(?i)^[a-z0-9]+$"}}}}
   */
  val: map(z.string(), z.string().regex(regexp("(?i)^[a-z0-9]+$"))),
});

/**
 * @generated from message tests.harness.cases.MapRecursive.Msg
 */
export const MapRecursive_MsgSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minLen":"3"}}
   */
  val: z.string().min(3),
});

/**
 * @generated from message tests.harness.cases.MapRecursive
 */
export const MapRecursiveSchema = z.object({
  /**
   * @generated from field: map<uint32, tests.harness.cases.MapRecursive.Msg> val = 1;
   */
  val: map(uint32, z.lazy(() => MapRecursive_MsgSchema).nullish()),
});

/**
 * @generated from message tests.harness.cases.MapExactIgnore
 */
export const MapExactIgnoreSchema = z.object({
  /**
   * @generated from field: map<uint64, string> val = 1;
   * @validate  {"map":{"minPairs":"3","maxPairs":"3","ignoreEmpty":true}}
   */
  val: map(uint64, z.string()),
});

/**
 * @generated from message tests.harness.cases.MultipleMaps
 */
export const MultipleMapsSchema = z.object({
  /**
   * @generated from field: map<uint32, string> first = 1;
   * @validate  {"map":{"keys":{"uint32":{"gt":0}}}}
   */
  first: map(uint32.refine(numberGt(0)), z.string()),
  /**
   * @generated from field: map<int32, bool> second = 2;
   * @validate  {"map":{"keys":{"int32":{"lt":0}}}}
   */
  second: map(int32.refine(numberLt(0)), z.boolean()),
  /**
   * @generated from field: map<int32, bool> third = 3;
   * @validate  {"map":{"keys":{"int32":{"gt":0}}}}
   */
  third: map(int32.refine(numberGt(0)), z.boolean()),
});
