// @generated by protoc-gen-validate-zod-test v0.0.2-dev with parameter "target=ts,cases=packages/protoc-gen-validate-zod/tests/cases.txt,descriptor=vendor/cases.bin"
// @generated from file tests/harness/cases/numbers.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {expect, it} from "vitest";
import {DoubleConst, DoubleExGTELTE, DoubleExLTGT, DoubleGT, DoubleGTE, DoubleGTELTE, DoubleGTLT, DoubleIgnore, DoubleIn, DoubleLT, DoubleLTE, DoubleNone, DoubleNotIn, Fixed32Const, Fixed32ExGTELTE, Fixed32ExLTGT, Fixed32GT, Fixed32GTE, Fixed32GTELTE, Fixed32GTLT, Fixed32Ignore, Fixed32In, Fixed32LT, Fixed32LTE, Fixed32None, Fixed32NotIn, Fixed64Const, Fixed64ExGTELTE, Fixed64ExLTGT, Fixed64GT, Fixed64GTE, Fixed64GTELTE, Fixed64GTLT, Fixed64Ignore, Fixed64In, Fixed64LT, Fixed64LTE, Fixed64None, Fixed64NotIn, FloatConst, FloatExGTELTE, FloatExLTGT, FloatGT, FloatGTE, FloatGTELTE, FloatGTLT, FloatIgnore, FloatIn, FloatLT, FloatLTE, FloatNone, FloatNotIn, Int32Const, Int32ExGTELTE, Int32ExLTGT, Int32GT, Int32GTE, Int32GTELTE, Int32GTLT, Int32Ignore, Int32In, Int32LT, Int32LTE, Int32None, Int32NotIn, Int64Const, Int64ExGTELTE, Int64ExLTGT, Int64GT, Int64GTE, Int64GTELTE, Int64GTLT, Int64Ignore, Int64In, Int64LT, Int64LTE, Int64LTEOptional, Int64None, Int64NotIn, SFixed32Const, SFixed32ExGTELTE, SFixed32ExLTGT, SFixed32GT, SFixed32GTE, SFixed32GTELTE, SFixed32GTLT, SFixed32Ignore, SFixed32In, SFixed32LT, SFixed32LTE, SFixed32None, SFixed32NotIn, SFixed64Const, SFixed64ExGTELTE, SFixed64ExLTGT, SFixed64GT, SFixed64GTE, SFixed64GTELTE, SFixed64GTLT, SFixed64Ignore, SFixed64In, SFixed64LT, SFixed64LTE, SFixed64None, SFixed64NotIn, SInt32Const, SInt32ExGTELTE, SInt32ExLTGT, SInt32GT, SInt32GTE, SInt32GTELTE, SInt32GTLT, SInt32Ignore, SInt32In, SInt32LT, SInt32LTE, SInt32None, SInt32NotIn, SInt64Const, SInt64ExGTELTE, SInt64ExLTGT, SInt64GT, SInt64GTE, SInt64GTELTE, SInt64GTLT, SInt64Ignore, SInt64In, SInt64LT, SInt64LTE, SInt64None, SInt64NotIn, UInt32Const, UInt32ExGTELTE, UInt32ExLTGT, UInt32GT, UInt32GTE, UInt32GTELTE, UInt32GTLT, UInt32Ignore, UInt32In, UInt32LT, UInt32LTE, UInt32None, UInt32NotIn, UInt64Const, UInt64ExGTELTE, UInt64ExLTGT, UInt64GT, UInt64GTE, UInt64GTELTE, UInt64GTLT, UInt64Ignore, UInt64In, UInt64LT, UInt64LTE, UInt64None, UInt64NotIn} from "./numbers_pb.js";
import {DoubleConstSchema, DoubleExGTELTESchema, DoubleExLTGTSchema, DoubleGTELTESchema, DoubleGTESchema, DoubleGTLTSchema, DoubleGTSchema, DoubleIgnoreSchema, DoubleInSchema, DoubleLTESchema, DoubleLTSchema, DoubleNoneSchema, DoubleNotInSchema, Fixed32ConstSchema, Fixed32ExGTELTESchema, Fixed32ExLTGTSchema, Fixed32GTELTESchema, Fixed32GTESchema, Fixed32GTLTSchema, Fixed32GTSchema, Fixed32IgnoreSchema, Fixed32InSchema, Fixed32LTESchema, Fixed32LTSchema, Fixed32NoneSchema, Fixed32NotInSchema, Fixed64ConstSchema, Fixed64ExGTELTESchema, Fixed64ExLTGTSchema, Fixed64GTELTESchema, Fixed64GTESchema, Fixed64GTLTSchema, Fixed64GTSchema, Fixed64IgnoreSchema, Fixed64InSchema, Fixed64LTESchema, Fixed64LTSchema, Fixed64NoneSchema, Fixed64NotInSchema, FloatConstSchema, FloatExGTELTESchema, FloatExLTGTSchema, FloatGTELTESchema, FloatGTESchema, FloatGTLTSchema, FloatGTSchema, FloatIgnoreSchema, FloatInSchema, FloatLTESchema, FloatLTSchema, FloatNoneSchema, FloatNotInSchema, Int32ConstSchema, Int32ExGTELTESchema, Int32ExLTGTSchema, Int32GTELTESchema, Int32GTESchema, Int32GTLTSchema, Int32GTSchema, Int32IgnoreSchema, Int32InSchema, Int32LTESchema, Int32LTSchema, Int32NoneSchema, Int32NotInSchema, Int64ConstSchema, Int64ExGTELTESchema, Int64ExLTGTSchema, Int64GTELTESchema, Int64GTESchema, Int64GTLTSchema, Int64GTSchema, Int64IgnoreSchema, Int64InSchema, Int64LTEOptionalSchema, Int64LTESchema, Int64LTSchema, Int64NoneSchema, Int64NotInSchema, SFixed32ConstSchema, SFixed32ExGTELTESchema, SFixed32ExLTGTSchema, SFixed32GTELTESchema, SFixed32GTESchema, SFixed32GTLTSchema, SFixed32GTSchema, SFixed32IgnoreSchema, SFixed32InSchema, SFixed32LTESchema, SFixed32LTSchema, SFixed32NoneSchema, SFixed32NotInSchema, SFixed64ConstSchema, SFixed64ExGTELTESchema, SFixed64ExLTGTSchema, SFixed64GTELTESchema, SFixed64GTESchema, SFixed64GTLTSchema, SFixed64GTSchema, SFixed64IgnoreSchema, SFixed64InSchema, SFixed64LTESchema, SFixed64LTSchema, SFixed64NoneSchema, SFixed64NotInSchema, SInt32ConstSchema, SInt32ExGTELTESchema, SInt32ExLTGTSchema, SInt32GTELTESchema, SInt32GTESchema, SInt32GTLTSchema, SInt32GTSchema, SInt32IgnoreSchema, SInt32InSchema, SInt32LTESchema, SInt32LTSchema, SInt32NoneSchema, SInt32NotInSchema, SInt64ConstSchema, SInt64ExGTELTESchema, SInt64ExLTGTSchema, SInt64GTELTESchema, SInt64GTESchema, SInt64GTLTSchema, SInt64GTSchema, SInt64IgnoreSchema, SInt64InSchema, SInt64LTESchema, SInt64LTSchema, SInt64NoneSchema, SInt64NotInSchema, UInt32ConstSchema, UInt32ExGTELTESchema, UInt32ExLTGTSchema, UInt32GTELTESchema, UInt32GTESchema, UInt32GTLTSchema, UInt32GTSchema, UInt32IgnoreSchema, UInt32InSchema, UInt32LTESchema, UInt32LTSchema, UInt32NoneSchema, UInt32NotInSchema, UInt64ConstSchema, UInt64ExGTELTESchema, UInt64ExLTGTSchema, UInt64GTELTESchema, UInt64GTESchema, UInt64GTLTSchema, UInt64GTSchema, UInt64IgnoreSchema, UInt64InSchema, UInt64LTESchema, UInt64LTSchema, UInt64NoneSchema, UInt64NotInSchema} from "./numbers_zod.js";

it("float - none - valid", () => {
  const message = FloatNone.fromJson({"val":-1.2345600128173828});
  expect(message).toBeValid(FloatNoneSchema);
});

it("float - const - valid", () => {
  const message = FloatConst.fromJson({"val":1.2300000190734863});
  expect(message).toBeValid(FloatConstSchema);
});

it("float - const - invalid", () => {
  const message = FloatConst.fromJson({"val":4.559999942779541});
  expect(message).toBeInvalid(FloatConstSchema, 1);
});

it("float - in - valid", () => {
  const message = FloatIn.fromJson({"val":7.889999866485596});
  expect(message).toBeValid(FloatInSchema);
});

it("float - in - invalid", () => {
  const message = FloatIn.fromJson({"val":10.109999656677246});
  expect(message).toBeInvalid(FloatInSchema, 1);
});

it("float - not in - valid", () => {
  const message = FloatNotIn.fromJson({"val":1});
  expect(message).toBeValid(FloatNotInSchema);
});

it("float - not in - invalid", () => {
  const message = FloatNotIn.fromJson({});
  expect(message).toBeInvalid(FloatNotInSchema, 1);
});

it("float - lt - valid", () => {
  const message = FloatLT.fromJson({"val":-1});
  expect(message).toBeValid(FloatLTSchema);
});

it("float - lt - invalid (equal)", () => {
  const message = FloatLT.fromJson({});
  expect(message).toBeInvalid(FloatLTSchema, 1);
});

it("float - lt - invalid", () => {
  const message = FloatLT.fromJson({"val":1});
  expect(message).toBeInvalid(FloatLTSchema, 1);
});

it("float - lte - valid", () => {
  const message = FloatLTE.fromJson({"val":63});
  expect(message).toBeValid(FloatLTESchema);
});

it("float - lte - valid (equal)", () => {
  const message = FloatLTE.fromJson({"val":64});
  expect(message).toBeValid(FloatLTESchema);
});

it("float - lte - invalid", () => {
  const message = FloatLTE.fromJson({"val":65});
  expect(message).toBeInvalid(FloatLTESchema, 1);
});

it("float - gt - valid", () => {
  const message = FloatGT.fromJson({"val":17});
  expect(message).toBeValid(FloatGTSchema);
});

it("float - gt - invalid (equal)", () => {
  const message = FloatGT.fromJson({"val":16});
  expect(message).toBeInvalid(FloatGTSchema, 1);
});

it("float - gt - invalid", () => {
  const message = FloatGT.fromJson({"val":15});
  expect(message).toBeInvalid(FloatGTSchema, 1);
});

it("float - gte - valid", () => {
  const message = FloatGTE.fromJson({"val":9});
  expect(message).toBeValid(FloatGTESchema);
});

it("float - gte - valid (equal)", () => {
  const message = FloatGTE.fromJson({"val":8});
  expect(message).toBeValid(FloatGTESchema);
});

it("float - gte - invalid", () => {
  const message = FloatGTE.fromJson({"val":7});
  expect(message).toBeInvalid(FloatGTESchema, 1);
});

it("float - gt & lt - valid", () => {
  const message = FloatGTLT.fromJson({"val":5});
  expect(message).toBeValid(FloatGTLTSchema);
});

it("float - gt & lt - invalid (above)", () => {
  const message = FloatGTLT.fromJson({"val":11});
  expect(message).toBeInvalid(FloatGTLTSchema, 1);
});

it("float - gt & lt - invalid (below)", () => {
  const message = FloatGTLT.fromJson({"val":-1});
  expect(message).toBeInvalid(FloatGTLTSchema, 1);
});

it("float - gt & lt - invalid (max)", () => {
  const message = FloatGTLT.fromJson({"val":10});
  expect(message).toBeInvalid(FloatGTLTSchema, 1);
});

it("float - gt & lt - invalid (min)", () => {
  const message = FloatGTLT.fromJson({});
  expect(message).toBeInvalid(FloatGTLTSchema, 1);
});

it("float - exclusive gt & lt - valid (above)", () => {
  const message = FloatExLTGT.fromJson({"val":11});
  expect(message).toBeValid(FloatExLTGTSchema);
});

it("float - exclusive gt & lt - valid (below)", () => {
  const message = FloatExLTGT.fromJson({"val":-1});
  expect(message).toBeValid(FloatExLTGTSchema);
});

it("float - exclusive gt & lt - invalid", () => {
  const message = FloatExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(FloatExLTGTSchema, 1);
});

it("float - exclusive gt & lt - invalid (max)", () => {
  const message = FloatExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(FloatExLTGTSchema, 1);
});

it("float - exclusive gt & lt - invalid (min)", () => {
  const message = FloatExLTGT.fromJson({});
  expect(message).toBeInvalid(FloatExLTGTSchema, 1);
});

it("float - gte & lte - valid", () => {
  const message = FloatGTELTE.fromJson({"val":200});
  expect(message).toBeValid(FloatGTELTESchema);
});

it("float - gte & lte - valid (max)", () => {
  const message = FloatGTELTE.fromJson({"val":256});
  expect(message).toBeValid(FloatGTELTESchema);
});

it("float - gte & lte - valid (min)", () => {
  const message = FloatGTELTE.fromJson({"val":128});
  expect(message).toBeValid(FloatGTELTESchema);
});

it("float - gte & lte - invalid (above)", () => {
  const message = FloatGTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(FloatGTELTESchema, 1);
});

it("float - gte & lte - invalid (below)", () => {
  const message = FloatGTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(FloatGTELTESchema, 1);
});

it("float - exclusive gte & lte - valid (above)", () => {
  const message = FloatExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(FloatExGTELTESchema);
});

it("float - exclusive gte & lte - valid (below)", () => {
  const message = FloatExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(FloatExGTELTESchema);
});

it("float - exclusive gte & lte - valid (max)", () => {
  const message = FloatExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(FloatExGTELTESchema);
});

it("float - exclusive gte & lte - valid (min)", () => {
  const message = FloatExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(FloatExGTELTESchema);
});

it("float - exclusive gte & lte - invalid", () => {
  const message = FloatExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(FloatExGTELTESchema, 1);
});

it("float - ignore_empty gte & lte - valid", () => {
  const message = FloatIgnore.fromJson({});
  expect(message).toBeValid(FloatIgnoreSchema);
});

it("double - none - valid", () => {
  const message = DoubleNone.fromJson({"val":-1.23456});
  expect(message).toBeValid(DoubleNoneSchema);
});

it("double - const - valid", () => {
  const message = DoubleConst.fromJson({"val":1.23});
  expect(message).toBeValid(DoubleConstSchema);
});

it("double - const - invalid", () => {
  const message = DoubleConst.fromJson({"val":4.56});
  expect(message).toBeInvalid(DoubleConstSchema, 1);
});

it("double - in - valid", () => {
  const message = DoubleIn.fromJson({"val":7.89});
  expect(message).toBeValid(DoubleInSchema);
});

it("double - in - invalid", () => {
  const message = DoubleIn.fromJson({"val":10.11});
  expect(message).toBeInvalid(DoubleInSchema, 1);
});

it("double - not in - valid", () => {
  const message = DoubleNotIn.fromJson({"val":1});
  expect(message).toBeValid(DoubleNotInSchema);
});

it("double - not in - invalid", () => {
  const message = DoubleNotIn.fromJson({});
  expect(message).toBeInvalid(DoubleNotInSchema, 1);
});

it("double - lt - valid", () => {
  const message = DoubleLT.fromJson({"val":-1});
  expect(message).toBeValid(DoubleLTSchema);
});

it("double - lt - invalid (equal)", () => {
  const message = DoubleLT.fromJson({});
  expect(message).toBeInvalid(DoubleLTSchema, 1);
});

it("double - lt - invalid", () => {
  const message = DoubleLT.fromJson({"val":1});
  expect(message).toBeInvalid(DoubleLTSchema, 1);
});

it("double - lte - valid", () => {
  const message = DoubleLTE.fromJson({"val":63});
  expect(message).toBeValid(DoubleLTESchema);
});

it("double - lte - valid (equal)", () => {
  const message = DoubleLTE.fromJson({"val":64});
  expect(message).toBeValid(DoubleLTESchema);
});

it("double - lte - invalid", () => {
  const message = DoubleLTE.fromJson({"val":65});
  expect(message).toBeInvalid(DoubleLTESchema, 1);
});

it("double - gt - valid", () => {
  const message = DoubleGT.fromJson({"val":17});
  expect(message).toBeValid(DoubleGTSchema);
});

it("double - gt - invalid (equal)", () => {
  const message = DoubleGT.fromJson({"val":16});
  expect(message).toBeInvalid(DoubleGTSchema, 1);
});

it("double - gt - invalid", () => {
  const message = DoubleGT.fromJson({"val":15});
  expect(message).toBeInvalid(DoubleGTSchema, 1);
});

it("double - gte - valid", () => {
  const message = DoubleGTE.fromJson({"val":9});
  expect(message).toBeValid(DoubleGTESchema);
});

it("double - gte - valid (equal)", () => {
  const message = DoubleGTE.fromJson({"val":8});
  expect(message).toBeValid(DoubleGTESchema);
});

it("double - gte - invalid", () => {
  const message = DoubleGTE.fromJson({"val":7});
  expect(message).toBeInvalid(DoubleGTESchema, 1);
});

it("double - gt & lt - valid", () => {
  const message = DoubleGTLT.fromJson({"val":5});
  expect(message).toBeValid(DoubleGTLTSchema);
});

it("double - gt & lt - invalid (above)", () => {
  const message = DoubleGTLT.fromJson({"val":11});
  expect(message).toBeInvalid(DoubleGTLTSchema, 1);
});

it("double - gt & lt - invalid (below)", () => {
  const message = DoubleGTLT.fromJson({"val":-1});
  expect(message).toBeInvalid(DoubleGTLTSchema, 1);
});

it("double - gt & lt - invalid (max)", () => {
  const message = DoubleGTLT.fromJson({"val":10});
  expect(message).toBeInvalid(DoubleGTLTSchema, 1);
});

it("double - gt & lt - invalid (min)", () => {
  const message = DoubleGTLT.fromJson({});
  expect(message).toBeInvalid(DoubleGTLTSchema, 1);
});

it("double - exclusive gt & lt - valid (above)", () => {
  const message = DoubleExLTGT.fromJson({"val":11});
  expect(message).toBeValid(DoubleExLTGTSchema);
});

it("double - exclusive gt & lt - valid (below)", () => {
  const message = DoubleExLTGT.fromJson({"val":-1});
  expect(message).toBeValid(DoubleExLTGTSchema);
});

it("double - exclusive gt & lt - invalid", () => {
  const message = DoubleExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(DoubleExLTGTSchema, 1);
});

it("double - exclusive gt & lt - invalid (max)", () => {
  const message = DoubleExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(DoubleExLTGTSchema, 1);
});

it("double - exclusive gt & lt - invalid (min)", () => {
  const message = DoubleExLTGT.fromJson({});
  expect(message).toBeInvalid(DoubleExLTGTSchema, 1);
});

it("double - gte & lte - valid", () => {
  const message = DoubleGTELTE.fromJson({"val":200});
  expect(message).toBeValid(DoubleGTELTESchema);
});

it("double - gte & lte - valid (max)", () => {
  const message = DoubleGTELTE.fromJson({"val":256});
  expect(message).toBeValid(DoubleGTELTESchema);
});

it("double - gte & lte - valid (min)", () => {
  const message = DoubleGTELTE.fromJson({"val":128});
  expect(message).toBeValid(DoubleGTELTESchema);
});

it("double - gte & lte - invalid (above)", () => {
  const message = DoubleGTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(DoubleGTELTESchema, 1);
});

it("double - gte & lte - invalid (below)", () => {
  const message = DoubleGTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(DoubleGTELTESchema, 1);
});

it("double - exclusive gte & lte - valid (above)", () => {
  const message = DoubleExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(DoubleExGTELTESchema);
});

it("double - exclusive gte & lte - valid (below)", () => {
  const message = DoubleExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(DoubleExGTELTESchema);
});

it("double - exclusive gte & lte - valid (max)", () => {
  const message = DoubleExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(DoubleExGTELTESchema);
});

it("double - exclusive gte & lte - valid (min)", () => {
  const message = DoubleExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(DoubleExGTELTESchema);
});

it("double - exclusive gte & lte - invalid", () => {
  const message = DoubleExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(DoubleExGTELTESchema, 1);
});

it("double - ignore_empty gte & lte - valid", () => {
  const message = DoubleIgnore.fromJson({});
  expect(message).toBeValid(DoubleIgnoreSchema);
});

it("int32 - none - valid", () => {
  const message = Int32None.fromJson({"val":123});
  expect(message).toBeValid(Int32NoneSchema);
});

it("int32 - const - valid", () => {
  const message = Int32Const.fromJson({"val":1});
  expect(message).toBeValid(Int32ConstSchema);
});

it("int32 - const - invalid", () => {
  const message = Int32Const.fromJson({"val":2});
  expect(message).toBeInvalid(Int32ConstSchema, 1);
});

it("int32 - in - valid", () => {
  const message = Int32In.fromJson({"val":3});
  expect(message).toBeValid(Int32InSchema);
});

it("int32 - in - invalid", () => {
  const message = Int32In.fromJson({"val":5});
  expect(message).toBeInvalid(Int32InSchema, 1);
});

it("int32 - not in - valid", () => {
  const message = Int32NotIn.fromJson({"val":1});
  expect(message).toBeValid(Int32NotInSchema);
});

it("int32 - not in - invalid", () => {
  const message = Int32NotIn.fromJson({});
  expect(message).toBeInvalid(Int32NotInSchema, 1);
});

it("int32 - lt - valid", () => {
  const message = Int32LT.fromJson({"val":-1});
  expect(message).toBeValid(Int32LTSchema);
});

it("int32 - lt - invalid (equal)", () => {
  const message = Int32LT.fromJson({});
  expect(message).toBeInvalid(Int32LTSchema, 1);
});

it("int32 - lt - invalid", () => {
  const message = Int32LT.fromJson({"val":1});
  expect(message).toBeInvalid(Int32LTSchema, 1);
});

it("int32 - lte - valid", () => {
  const message = Int32LTE.fromJson({"val":63});
  expect(message).toBeValid(Int32LTESchema);
});

it("int32 - lte - valid (equal)", () => {
  const message = Int32LTE.fromJson({"val":64});
  expect(message).toBeValid(Int32LTESchema);
});

it("int32 - lte - invalid", () => {
  const message = Int32LTE.fromJson({"val":65});
  expect(message).toBeInvalid(Int32LTESchema, 1);
});

it("int32 - gt - valid", () => {
  const message = Int32GT.fromJson({"val":17});
  expect(message).toBeValid(Int32GTSchema);
});

it("int32 - gt - invalid (equal)", () => {
  const message = Int32GT.fromJson({"val":16});
  expect(message).toBeInvalid(Int32GTSchema, 1);
});

it("int32 - gt - invalid", () => {
  const message = Int32GT.fromJson({"val":15});
  expect(message).toBeInvalid(Int32GTSchema, 1);
});

it("int32 - gte - valid", () => {
  const message = Int32GTE.fromJson({"val":9});
  expect(message).toBeValid(Int32GTESchema);
});

it("int32 - gte - valid (equal)", () => {
  const message = Int32GTE.fromJson({"val":8});
  expect(message).toBeValid(Int32GTESchema);
});

it("int32 - gte - invalid", () => {
  const message = Int32GTE.fromJson({"val":7});
  expect(message).toBeInvalid(Int32GTESchema, 1);
});

it("int32 - gt & lt - valid", () => {
  const message = Int32GTLT.fromJson({"val":5});
  expect(message).toBeValid(Int32GTLTSchema);
});

it("int32 - gt & lt - invalid (above)", () => {
  const message = Int32GTLT.fromJson({"val":11});
  expect(message).toBeInvalid(Int32GTLTSchema, 1);
});

it("int32 - gt & lt - invalid (below)", () => {
  const message = Int32GTLT.fromJson({"val":-1});
  expect(message).toBeInvalid(Int32GTLTSchema, 1);
});

it("int32 - gt & lt - invalid (max)", () => {
  const message = Int32GTLT.fromJson({"val":10});
  expect(message).toBeInvalid(Int32GTLTSchema, 1);
});

it("int32 - gt & lt - invalid (min)", () => {
  const message = Int32GTLT.fromJson({});
  expect(message).toBeInvalid(Int32GTLTSchema, 1);
});

it("int32 - exclusive gt & lt - valid (above)", () => {
  const message = Int32ExLTGT.fromJson({"val":11});
  expect(message).toBeValid(Int32ExLTGTSchema);
});

it("int32 - exclusive gt & lt - valid (below)", () => {
  const message = Int32ExLTGT.fromJson({"val":-1});
  expect(message).toBeValid(Int32ExLTGTSchema);
});

it("int32 - exclusive gt & lt - invalid", () => {
  const message = Int32ExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(Int32ExLTGTSchema, 1);
});

it("int32 - exclusive gt & lt - invalid (max)", () => {
  const message = Int32ExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(Int32ExLTGTSchema, 1);
});

it("int32 - exclusive gt & lt - invalid (min)", () => {
  const message = Int32ExLTGT.fromJson({});
  expect(message).toBeInvalid(Int32ExLTGTSchema, 1);
});

it("int32 - gte & lte - valid", () => {
  const message = Int32GTELTE.fromJson({"val":200});
  expect(message).toBeValid(Int32GTELTESchema);
});

it("int32 - gte & lte - valid (max)", () => {
  const message = Int32GTELTE.fromJson({"val":256});
  expect(message).toBeValid(Int32GTELTESchema);
});

it("int32 - gte & lte - valid (min)", () => {
  const message = Int32GTELTE.fromJson({"val":128});
  expect(message).toBeValid(Int32GTELTESchema);
});

it("int32 - gte & lte - invalid (above)", () => {
  const message = Int32GTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(Int32GTELTESchema, 1);
});

it("int32 - gte & lte - invalid (below)", () => {
  const message = Int32GTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(Int32GTELTESchema, 1);
});

it("int32 - exclusive gte & lte - valid (above)", () => {
  const message = Int32ExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(Int32ExGTELTESchema);
});

it("int32 - exclusive gte & lte - valid (below)", () => {
  const message = Int32ExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(Int32ExGTELTESchema);
});

it("int32 - exclusive gte & lte - valid (max)", () => {
  const message = Int32ExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(Int32ExGTELTESchema);
});

it("int32 - exclusive gte & lte - valid (min)", () => {
  const message = Int32ExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(Int32ExGTELTESchema);
});

it("int32 - exclusive gte & lte - invalid", () => {
  const message = Int32ExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(Int32ExGTELTESchema, 1);
});

it("int32 - ignore_empty gte & lte - valid", () => {
  const message = Int32Ignore.fromJson({});
  expect(message).toBeValid(Int32IgnoreSchema);
});

it("int64 - none - valid", () => {
  const message = Int64None.fromJson({"val":"123"});
  expect(message).toBeValid(Int64NoneSchema);
});

it("int64 - const - valid", () => {
  const message = Int64Const.fromJson({"val":"1"});
  expect(message).toBeValid(Int64ConstSchema);
});

it("int64 - const - invalid", () => {
  const message = Int64Const.fromJson({"val":"2"});
  expect(message).toBeInvalid(Int64ConstSchema, 1);
});

it("int64 - in - valid", () => {
  const message = Int64In.fromJson({"val":"3"});
  expect(message).toBeValid(Int64InSchema);
});

it("int64 - in - invalid", () => {
  const message = Int64In.fromJson({"val":"5"});
  expect(message).toBeInvalid(Int64InSchema, 1);
});

it("int64 - not in - valid", () => {
  const message = Int64NotIn.fromJson({"val":"1"});
  expect(message).toBeValid(Int64NotInSchema);
});

it("int64 - not in - invalid", () => {
  const message = Int64NotIn.fromJson({});
  expect(message).toBeInvalid(Int64NotInSchema, 1);
});

it("int64 - lt - valid", () => {
  const message = Int64LT.fromJson({"val":"-1"});
  expect(message).toBeValid(Int64LTSchema);
});

it("int64 - lt - invalid (equal)", () => {
  const message = Int64LT.fromJson({});
  expect(message).toBeInvalid(Int64LTSchema, 1);
});

it("int64 - lt - invalid", () => {
  const message = Int64LT.fromJson({"val":"1"});
  expect(message).toBeInvalid(Int64LTSchema, 1);
});

it("int64 - lte - valid", () => {
  const message = Int64LTE.fromJson({"val":"63"});
  expect(message).toBeValid(Int64LTESchema);
});

it("int64 - lte - valid (equal)", () => {
  const message = Int64LTE.fromJson({"val":"64"});
  expect(message).toBeValid(Int64LTESchema);
});

it("int64 - lte - invalid", () => {
  const message = Int64LTE.fromJson({"val":"65"});
  expect(message).toBeInvalid(Int64LTESchema, 1);
});

it("int64 - gt - valid", () => {
  const message = Int64GT.fromJson({"val":"17"});
  expect(message).toBeValid(Int64GTSchema);
});

it("int64 - gt - invalid (equal)", () => {
  const message = Int64GT.fromJson({"val":"16"});
  expect(message).toBeInvalid(Int64GTSchema, 1);
});

it("int64 - gt - invalid", () => {
  const message = Int64GT.fromJson({"val":"15"});
  expect(message).toBeInvalid(Int64GTSchema, 1);
});

it("int64 - gte - valid", () => {
  const message = Int64GTE.fromJson({"val":"9"});
  expect(message).toBeValid(Int64GTESchema);
});

it("int64 - gte - valid (equal)", () => {
  const message = Int64GTE.fromJson({"val":"8"});
  expect(message).toBeValid(Int64GTESchema);
});

it("int64 - gte - invalid", () => {
  const message = Int64GTE.fromJson({"val":"7"});
  expect(message).toBeInvalid(Int64GTESchema, 1);
});

it("int64 - gt & lt - valid", () => {
  const message = Int64GTLT.fromJson({"val":"5"});
  expect(message).toBeValid(Int64GTLTSchema);
});

it("int64 - gt & lt - invalid (above)", () => {
  const message = Int64GTLT.fromJson({"val":"11"});
  expect(message).toBeInvalid(Int64GTLTSchema, 1);
});

it("int64 - gt & lt - invalid (below)", () => {
  const message = Int64GTLT.fromJson({"val":"-1"});
  expect(message).toBeInvalid(Int64GTLTSchema, 1);
});

it("int64 - gt & lt - invalid (max)", () => {
  const message = Int64GTLT.fromJson({"val":"10"});
  expect(message).toBeInvalid(Int64GTLTSchema, 1);
});

it("int64 - gt & lt - invalid (min)", () => {
  const message = Int64GTLT.fromJson({});
  expect(message).toBeInvalid(Int64GTLTSchema, 1);
});

it("int64 - exclusive gt & lt - valid (above)", () => {
  const message = Int64ExLTGT.fromJson({"val":"11"});
  expect(message).toBeValid(Int64ExLTGTSchema);
});

it("int64 - exclusive gt & lt - valid (below)", () => {
  const message = Int64ExLTGT.fromJson({"val":"-1"});
  expect(message).toBeValid(Int64ExLTGTSchema);
});

it("int64 - exclusive gt & lt - invalid", () => {
  const message = Int64ExLTGT.fromJson({"val":"5"});
  expect(message).toBeInvalid(Int64ExLTGTSchema, 1);
});

it("int64 - exclusive gt & lt - invalid (max)", () => {
  const message = Int64ExLTGT.fromJson({"val":"10"});
  expect(message).toBeInvalid(Int64ExLTGTSchema, 1);
});

it("int64 - exclusive gt & lt - invalid (min)", () => {
  const message = Int64ExLTGT.fromJson({});
  expect(message).toBeInvalid(Int64ExLTGTSchema, 1);
});

it("int64 - gte & lte - valid", () => {
  const message = Int64GTELTE.fromJson({"val":"200"});
  expect(message).toBeValid(Int64GTELTESchema);
});

it("int64 - gte & lte - valid (max)", () => {
  const message = Int64GTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(Int64GTELTESchema);
});

it("int64 - gte & lte - valid (min)", () => {
  const message = Int64GTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(Int64GTELTESchema);
});

it("int64 - gte & lte - invalid (above)", () => {
  const message = Int64GTELTE.fromJson({"val":"300"});
  expect(message).toBeInvalid(Int64GTELTESchema, 1);
});

it("int64 - gte & lte - invalid (below)", () => {
  const message = Int64GTELTE.fromJson({"val":"100"});
  expect(message).toBeInvalid(Int64GTELTESchema, 1);
});

it("int64 - exclusive gte & lte - valid (above)", () => {
  const message = Int64ExGTELTE.fromJson({"val":"300"});
  expect(message).toBeValid(Int64ExGTELTESchema);
});

it("int64 - exclusive gte & lte - valid (below)", () => {
  const message = Int64ExGTELTE.fromJson({"val":"100"});
  expect(message).toBeValid(Int64ExGTELTESchema);
});

it("int64 - exclusive gte & lte - valid (max)", () => {
  const message = Int64ExGTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(Int64ExGTELTESchema);
});

it("int64 - exclusive gte & lte - valid (min)", () => {
  const message = Int64ExGTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(Int64ExGTELTESchema);
});

it("int64 - exclusive gte & lte - invalid", () => {
  const message = Int64ExGTELTE.fromJson({"val":"200"});
  expect(message).toBeInvalid(Int64ExGTELTESchema, 1);
});

it("int64 - ignore_empty gte & lte - valid", () => {
  const message = Int64Ignore.fromJson({});
  expect(message).toBeValid(Int64IgnoreSchema);
});

it("int64 optional - lte - valid", () => {
  const message = Int64LTEOptional.fromJson({"val":"63"});
  expect(message).toBeValid(Int64LTEOptionalSchema);
});

it("int64 optional - lte - valid (equal)", () => {
  const message = Int64LTEOptional.fromJson({"val":"64"});
  expect(message).toBeValid(Int64LTEOptionalSchema);
});

it("int64 optional - lte - valid (unset)", () => {
  const message = Int64LTEOptional.fromJson({});
  expect(message).toBeValid(Int64LTEOptionalSchema);
});

it("uint32 - none - valid", () => {
  const message = UInt32None.fromJson({"val":123});
  expect(message).toBeValid(UInt32NoneSchema);
});

it("uint32 - const - valid", () => {
  const message = UInt32Const.fromJson({"val":1});
  expect(message).toBeValid(UInt32ConstSchema);
});

it("uint32 - const - invalid", () => {
  const message = UInt32Const.fromJson({"val":2});
  expect(message).toBeInvalid(UInt32ConstSchema, 1);
});

it("uint32 - in - valid", () => {
  const message = UInt32In.fromJson({"val":3});
  expect(message).toBeValid(UInt32InSchema);
});

it("uint32 - in - invalid", () => {
  const message = UInt32In.fromJson({"val":5});
  expect(message).toBeInvalid(UInt32InSchema, 1);
});

it("uint32 - not in - valid", () => {
  const message = UInt32NotIn.fromJson({"val":1});
  expect(message).toBeValid(UInt32NotInSchema);
});

it("uint32 - not in - invalid", () => {
  const message = UInt32NotIn.fromJson({});
  expect(message).toBeInvalid(UInt32NotInSchema, 1);
});

it("uint32 - lt - valid", () => {
  const message = UInt32LT.fromJson({"val":4});
  expect(message).toBeValid(UInt32LTSchema);
});

it("uint32 - lt - invalid (equal)", () => {
  const message = UInt32LT.fromJson({"val":5});
  expect(message).toBeInvalid(UInt32LTSchema, 1);
});

it("uint32 - lt - invalid", () => {
  const message = UInt32LT.fromJson({"val":6});
  expect(message).toBeInvalid(UInt32LTSchema, 1);
});

it("uint32 - lte - valid", () => {
  const message = UInt32LTE.fromJson({"val":63});
  expect(message).toBeValid(UInt32LTESchema);
});

it("uint32 - lte - valid (equal)", () => {
  const message = UInt32LTE.fromJson({"val":64});
  expect(message).toBeValid(UInt32LTESchema);
});

it("uint32 - lte - invalid", () => {
  const message = UInt32LTE.fromJson({"val":65});
  expect(message).toBeInvalid(UInt32LTESchema, 1);
});

it("uint32 - gt - valid", () => {
  const message = UInt32GT.fromJson({"val":17});
  expect(message).toBeValid(UInt32GTSchema);
});

it("uint32 - gt - invalid (equal)", () => {
  const message = UInt32GT.fromJson({"val":16});
  expect(message).toBeInvalid(UInt32GTSchema, 1);
});

it("uint32 - gt - invalid", () => {
  const message = UInt32GT.fromJson({"val":15});
  expect(message).toBeInvalid(UInt32GTSchema, 1);
});

it("uint32 - gte - valid", () => {
  const message = UInt32GTE.fromJson({"val":9});
  expect(message).toBeValid(UInt32GTESchema);
});

it("uint32 - gte - valid (equal)", () => {
  const message = UInt32GTE.fromJson({"val":8});
  expect(message).toBeValid(UInt32GTESchema);
});

it("uint32 - gte - invalid", () => {
  const message = UInt32GTE.fromJson({"val":7});
  expect(message).toBeInvalid(UInt32GTESchema, 1);
});

it("uint32 - gt & lt - valid", () => {
  const message = UInt32GTLT.fromJson({"val":7});
  expect(message).toBeValid(UInt32GTLTSchema);
});

it("uint32 - gt & lt - invalid (above)", () => {
  const message = UInt32GTLT.fromJson({"val":11});
  expect(message).toBeInvalid(UInt32GTLTSchema, 1);
});

it("uint32 - gt & lt - invalid (below)", () => {
  const message = UInt32GTLT.fromJson({"val":1});
  expect(message).toBeInvalid(UInt32GTLTSchema, 1);
});

it("uint32 - gt & lt - invalid (max)", () => {
  const message = UInt32GTLT.fromJson({"val":10});
  expect(message).toBeInvalid(UInt32GTLTSchema, 1);
});

it("uint32 - gt & lt - invalid (min)", () => {
  const message = UInt32GTLT.fromJson({"val":5});
  expect(message).toBeInvalid(UInt32GTLTSchema, 1);
});

it("uint32 - exclusive gt & lt - valid (above)", () => {
  const message = UInt32ExLTGT.fromJson({"val":11});
  expect(message).toBeValid(UInt32ExLTGTSchema);
});

it("uint32 - exclusive gt & lt - valid (below)", () => {
  const message = UInt32ExLTGT.fromJson({"val":4});
  expect(message).toBeValid(UInt32ExLTGTSchema);
});

it("uint32 - exclusive gt & lt - invalid", () => {
  const message = UInt32ExLTGT.fromJson({"val":7});
  expect(message).toBeInvalid(UInt32ExLTGTSchema, 1);
});

it("uint32 - exclusive gt & lt - invalid (max)", () => {
  const message = UInt32ExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(UInt32ExLTGTSchema, 1);
});

it("uint32 - exclusive gt & lt - invalid (min)", () => {
  const message = UInt32ExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(UInt32ExLTGTSchema, 1);
});

it("uint32 - gte & lte - valid", () => {
  const message = UInt32GTELTE.fromJson({"val":200});
  expect(message).toBeValid(UInt32GTELTESchema);
});

it("uint32 - gte & lte - valid (max)", () => {
  const message = UInt32GTELTE.fromJson({"val":256});
  expect(message).toBeValid(UInt32GTELTESchema);
});

it("uint32 - gte & lte - valid (min)", () => {
  const message = UInt32GTELTE.fromJson({"val":128});
  expect(message).toBeValid(UInt32GTELTESchema);
});

it("uint32 - gte & lte - invalid (above)", () => {
  const message = UInt32GTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(UInt32GTELTESchema, 1);
});

it("uint32 - gte & lte - invalid (below)", () => {
  const message = UInt32GTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(UInt32GTELTESchema, 1);
});

it("uint32 - exclusive gte & lte - valid (above)", () => {
  const message = UInt32ExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(UInt32ExGTELTESchema);
});

it("uint32 - exclusive gte & lte - valid (below)", () => {
  const message = UInt32ExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(UInt32ExGTELTESchema);
});

it("uint32 - exclusive gte & lte - valid (max)", () => {
  const message = UInt32ExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(UInt32ExGTELTESchema);
});

it("uint32 - exclusive gte & lte - valid (min)", () => {
  const message = UInt32ExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(UInt32ExGTELTESchema);
});

it("uint32 - exclusive gte & lte - invalid", () => {
  const message = UInt32ExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(UInt32ExGTELTESchema, 1);
});

it("uint32 - ignore_empty gte & lte - valid", () => {
  const message = UInt32Ignore.fromJson({});
  expect(message).toBeValid(UInt32IgnoreSchema);
});

it("uint64 - none - valid", () => {
  const message = UInt64None.fromJson({"val":"123"});
  expect(message).toBeValid(UInt64NoneSchema);
});

it("uint64 - const - valid", () => {
  const message = UInt64Const.fromJson({"val":"1"});
  expect(message).toBeValid(UInt64ConstSchema);
});

it("uint64 - const - invalid", () => {
  const message = UInt64Const.fromJson({"val":"2"});
  expect(message).toBeInvalid(UInt64ConstSchema, 1);
});

it("uint64 - in - valid", () => {
  const message = UInt64In.fromJson({"val":"3"});
  expect(message).toBeValid(UInt64InSchema);
});

it("uint64 - in - invalid", () => {
  const message = UInt64In.fromJson({"val":"5"});
  expect(message).toBeInvalid(UInt64InSchema, 1);
});

it("uint64 - not in - valid", () => {
  const message = UInt64NotIn.fromJson({"val":"1"});
  expect(message).toBeValid(UInt64NotInSchema);
});

it("uint64 - not in - invalid", () => {
  const message = UInt64NotIn.fromJson({});
  expect(message).toBeInvalid(UInt64NotInSchema, 1);
});

it("uint64 - lt - valid", () => {
  const message = UInt64LT.fromJson({"val":"4"});
  expect(message).toBeValid(UInt64LTSchema);
});

it("uint64 - lt - invalid (equal)", () => {
  const message = UInt64LT.fromJson({"val":"5"});
  expect(message).toBeInvalid(UInt64LTSchema, 1);
});

it("uint64 - lt - invalid", () => {
  const message = UInt64LT.fromJson({"val":"6"});
  expect(message).toBeInvalid(UInt64LTSchema, 1);
});

it("uint64 - lte - valid", () => {
  const message = UInt64LTE.fromJson({"val":"63"});
  expect(message).toBeValid(UInt64LTESchema);
});

it("uint64 - lte - valid (equal)", () => {
  const message = UInt64LTE.fromJson({"val":"64"});
  expect(message).toBeValid(UInt64LTESchema);
});

it("uint64 - lte - invalid", () => {
  const message = UInt64LTE.fromJson({"val":"65"});
  expect(message).toBeInvalid(UInt64LTESchema, 1);
});

it("uint64 - gt - valid", () => {
  const message = UInt64GT.fromJson({"val":"17"});
  expect(message).toBeValid(UInt64GTSchema);
});

it("uint64 - gt - invalid (equal)", () => {
  const message = UInt64GT.fromJson({"val":"16"});
  expect(message).toBeInvalid(UInt64GTSchema, 1);
});

it("uint64 - gt - invalid", () => {
  const message = UInt64GT.fromJson({"val":"15"});
  expect(message).toBeInvalid(UInt64GTSchema, 1);
});

it("uint64 - gte - valid", () => {
  const message = UInt64GTE.fromJson({"val":"9"});
  expect(message).toBeValid(UInt64GTESchema);
});

it("uint64 - gte - valid (equal)", () => {
  const message = UInt64GTE.fromJson({"val":"8"});
  expect(message).toBeValid(UInt64GTESchema);
});

it("uint64 - gte - invalid", () => {
  const message = UInt64GTE.fromJson({"val":"7"});
  expect(message).toBeInvalid(UInt64GTESchema, 1);
});

it("uint64 - gt & lt - valid", () => {
  const message = UInt64GTLT.fromJson({"val":"7"});
  expect(message).toBeValid(UInt64GTLTSchema);
});

it("uint64 - gt & lt - invalid (above)", () => {
  const message = UInt64GTLT.fromJson({"val":"11"});
  expect(message).toBeInvalid(UInt64GTLTSchema, 1);
});

it("uint64 - gt & lt - invalid (below)", () => {
  const message = UInt64GTLT.fromJson({"val":"1"});
  expect(message).toBeInvalid(UInt64GTLTSchema, 1);
});

it("uint64 - gt & lt - invalid (max)", () => {
  const message = UInt64GTLT.fromJson({"val":"10"});
  expect(message).toBeInvalid(UInt64GTLTSchema, 1);
});

it("uint64 - gt & lt - invalid (min)", () => {
  const message = UInt64GTLT.fromJson({"val":"5"});
  expect(message).toBeInvalid(UInt64GTLTSchema, 1);
});

it("uint64 - exclusive gt & lt - valid (above)", () => {
  const message = UInt64ExLTGT.fromJson({"val":"11"});
  expect(message).toBeValid(UInt64ExLTGTSchema);
});

it("uint64 - exclusive gt & lt - valid (below)", () => {
  const message = UInt64ExLTGT.fromJson({"val":"4"});
  expect(message).toBeValid(UInt64ExLTGTSchema);
});

it("uint64 - exclusive gt & lt - invalid", () => {
  const message = UInt64ExLTGT.fromJson({"val":"7"});
  expect(message).toBeInvalid(UInt64ExLTGTSchema, 1);
});

it("uint64 - exclusive gt & lt - invalid (max)", () => {
  const message = UInt64ExLTGT.fromJson({"val":"10"});
  expect(message).toBeInvalid(UInt64ExLTGTSchema, 1);
});

it("uint64 - exclusive gt & lt - invalid (min)", () => {
  const message = UInt64ExLTGT.fromJson({"val":"5"});
  expect(message).toBeInvalid(UInt64ExLTGTSchema, 1);
});

it("uint64 - gte & lte - valid", () => {
  const message = UInt64GTELTE.fromJson({"val":"200"});
  expect(message).toBeValid(UInt64GTELTESchema);
});

it("uint64 - gte & lte - valid (max)", () => {
  const message = UInt64GTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(UInt64GTELTESchema);
});

it("uint64 - gte & lte - valid (min)", () => {
  const message = UInt64GTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(UInt64GTELTESchema);
});

it("uint64 - gte & lte - invalid (above)", () => {
  const message = UInt64GTELTE.fromJson({"val":"300"});
  expect(message).toBeInvalid(UInt64GTELTESchema, 1);
});

it("uint64 - gte & lte - invalid (below)", () => {
  const message = UInt64GTELTE.fromJson({"val":"100"});
  expect(message).toBeInvalid(UInt64GTELTESchema, 1);
});

it("uint64 - exclusive gte & lte - valid (above)", () => {
  const message = UInt64ExGTELTE.fromJson({"val":"300"});
  expect(message).toBeValid(UInt64ExGTELTESchema);
});

it("uint64 - exclusive gte & lte - valid (below)", () => {
  const message = UInt64ExGTELTE.fromJson({"val":"100"});
  expect(message).toBeValid(UInt64ExGTELTESchema);
});

it("uint64 - exclusive gte & lte - valid (max)", () => {
  const message = UInt64ExGTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(UInt64ExGTELTESchema);
});

it("uint64 - exclusive gte & lte - valid (min)", () => {
  const message = UInt64ExGTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(UInt64ExGTELTESchema);
});

it("uint64 - exclusive gte & lte - invalid", () => {
  const message = UInt64ExGTELTE.fromJson({"val":"200"});
  expect(message).toBeInvalid(UInt64ExGTELTESchema, 1);
});

it("uint64 - ignore_empty gte & lte - valid", () => {
  const message = UInt64Ignore.fromJson({});
  expect(message).toBeValid(UInt64IgnoreSchema);
});

it("sint32 - none - valid", () => {
  const message = SInt32None.fromJson({"val":123});
  expect(message).toBeValid(SInt32NoneSchema);
});

it("sint32 - const - valid", () => {
  const message = SInt32Const.fromJson({"val":1});
  expect(message).toBeValid(SInt32ConstSchema);
});

it("sint32 - const - invalid", () => {
  const message = SInt32Const.fromJson({"val":2});
  expect(message).toBeInvalid(SInt32ConstSchema, 1);
});

it("sint32 - in - valid", () => {
  const message = SInt32In.fromJson({"val":3});
  expect(message).toBeValid(SInt32InSchema);
});

it("sint32 - in - invalid", () => {
  const message = SInt32In.fromJson({"val":5});
  expect(message).toBeInvalid(SInt32InSchema, 1);
});

it("sint32 - not in - valid", () => {
  const message = SInt32NotIn.fromJson({"val":1});
  expect(message).toBeValid(SInt32NotInSchema);
});

it("sint32 - not in - invalid", () => {
  const message = SInt32NotIn.fromJson({});
  expect(message).toBeInvalid(SInt32NotInSchema, 1);
});

it("sint32 - lt - valid", () => {
  const message = SInt32LT.fromJson({"val":-1});
  expect(message).toBeValid(SInt32LTSchema);
});

it("sint32 - lt - invalid (equal)", () => {
  const message = SInt32LT.fromJson({});
  expect(message).toBeInvalid(SInt32LTSchema, 1);
});

it("sint32 - lt - invalid", () => {
  const message = SInt32LT.fromJson({"val":1});
  expect(message).toBeInvalid(SInt32LTSchema, 1);
});

it("sint32 - lte - valid", () => {
  const message = SInt32LTE.fromJson({"val":63});
  expect(message).toBeValid(SInt32LTESchema);
});

it("sint32 - lte - valid (equal)", () => {
  const message = SInt32LTE.fromJson({"val":64});
  expect(message).toBeValid(SInt32LTESchema);
});

it("sint32 - lte - invalid", () => {
  const message = SInt32LTE.fromJson({"val":65});
  expect(message).toBeInvalid(SInt32LTESchema, 1);
});

it("sint32 - gt - valid", () => {
  const message = SInt32GT.fromJson({"val":17});
  expect(message).toBeValid(SInt32GTSchema);
});

it("sint32 - gt - invalid (equal)", () => {
  const message = SInt32GT.fromJson({"val":16});
  expect(message).toBeInvalid(SInt32GTSchema, 1);
});

it("sint32 - gt - invalid", () => {
  const message = SInt32GT.fromJson({"val":15});
  expect(message).toBeInvalid(SInt32GTSchema, 1);
});

it("sint32 - gte - valid", () => {
  const message = SInt32GTE.fromJson({"val":9});
  expect(message).toBeValid(SInt32GTESchema);
});

it("sint32 - gte - valid (equal)", () => {
  const message = SInt32GTE.fromJson({"val":8});
  expect(message).toBeValid(SInt32GTESchema);
});

it("sint32 - gte - invalid", () => {
  const message = SInt32GTE.fromJson({"val":7});
  expect(message).toBeInvalid(SInt32GTESchema, 1);
});

it("sint32 - gt & lt - valid", () => {
  const message = SInt32GTLT.fromJson({"val":5});
  expect(message).toBeValid(SInt32GTLTSchema);
});

it("sint32 - gt & lt - invalid (above)", () => {
  const message = SInt32GTLT.fromJson({"val":11});
  expect(message).toBeInvalid(SInt32GTLTSchema, 1);
});

it("sint32 - gt & lt - invalid (below)", () => {
  const message = SInt32GTLT.fromJson({"val":-1});
  expect(message).toBeInvalid(SInt32GTLTSchema, 1);
});

it("sint32 - gt & lt - invalid (max)", () => {
  const message = SInt32GTLT.fromJson({"val":10});
  expect(message).toBeInvalid(SInt32GTLTSchema, 1);
});

it("sint32 - gt & lt - invalid (min)", () => {
  const message = SInt32GTLT.fromJson({});
  expect(message).toBeInvalid(SInt32GTLTSchema, 1);
});

it("sint32 - exclusive gt & lt - valid (above)", () => {
  const message = SInt32ExLTGT.fromJson({"val":11});
  expect(message).toBeValid(SInt32ExLTGTSchema);
});

it("sint32 - exclusive gt & lt - valid (below)", () => {
  const message = SInt32ExLTGT.fromJson({"val":-1});
  expect(message).toBeValid(SInt32ExLTGTSchema);
});

it("sint32 - exclusive gt & lt - invalid", () => {
  const message = SInt32ExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(SInt32ExLTGTSchema, 1);
});

it("sint32 - exclusive gt & lt - invalid (max)", () => {
  const message = SInt32ExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(SInt32ExLTGTSchema, 1);
});

it("sint32 - exclusive gt & lt - invalid (min)", () => {
  const message = SInt32ExLTGT.fromJson({});
  expect(message).toBeInvalid(SInt32ExLTGTSchema, 1);
});

it("sint32 - gte & lte - valid", () => {
  const message = SInt32GTELTE.fromJson({"val":200});
  expect(message).toBeValid(SInt32GTELTESchema);
});

it("sint32 - gte & lte - valid (max)", () => {
  const message = SInt32GTELTE.fromJson({"val":256});
  expect(message).toBeValid(SInt32GTELTESchema);
});

it("sint32 - gte & lte - valid (min)", () => {
  const message = SInt32GTELTE.fromJson({"val":128});
  expect(message).toBeValid(SInt32GTELTESchema);
});

it("sint32 - gte & lte - invalid (above)", () => {
  const message = SInt32GTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(SInt32GTELTESchema, 1);
});

it("sint32 - gte & lte - invalid (below)", () => {
  const message = SInt32GTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(SInt32GTELTESchema, 1);
});

it("sint32 - exclusive gte & lte - valid (above)", () => {
  const message = SInt32ExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(SInt32ExGTELTESchema);
});

it("sint32 - exclusive gte & lte - valid (below)", () => {
  const message = SInt32ExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(SInt32ExGTELTESchema);
});

it("sint32 - exclusive gte & lte - valid (max)", () => {
  const message = SInt32ExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(SInt32ExGTELTESchema);
});

it("sint32 - exclusive gte & lte - valid (min)", () => {
  const message = SInt32ExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(SInt32ExGTELTESchema);
});

it("sint32 - exclusive gte & lte - invalid", () => {
  const message = SInt32ExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(SInt32ExGTELTESchema, 1);
});

it("sint32 - ignore_empty gte & lte - valid", () => {
  const message = SInt32Ignore.fromJson({});
  expect(message).toBeValid(SInt32IgnoreSchema);
});

it("sint64 - none - valid", () => {
  const message = SInt64None.fromJson({"val":"123"});
  expect(message).toBeValid(SInt64NoneSchema);
});

it("sint64 - const - valid", () => {
  const message = SInt64Const.fromJson({"val":"1"});
  expect(message).toBeValid(SInt64ConstSchema);
});

it("sint64 - const - invalid", () => {
  const message = SInt64Const.fromJson({"val":"2"});
  expect(message).toBeInvalid(SInt64ConstSchema, 1);
});

it("sint64 - in - valid", () => {
  const message = SInt64In.fromJson({"val":"3"});
  expect(message).toBeValid(SInt64InSchema);
});

it("sint64 - in - invalid", () => {
  const message = SInt64In.fromJson({"val":"5"});
  expect(message).toBeInvalid(SInt64InSchema, 1);
});

it("sint64 - not in - valid", () => {
  const message = SInt64NotIn.fromJson({"val":"1"});
  expect(message).toBeValid(SInt64NotInSchema);
});

it("sint64 - not in - invalid", () => {
  const message = SInt64NotIn.fromJson({});
  expect(message).toBeInvalid(SInt64NotInSchema, 1);
});

it("sint64 - lt - valid", () => {
  const message = SInt64LT.fromJson({"val":"-1"});
  expect(message).toBeValid(SInt64LTSchema);
});

it("sint64 - lt - invalid (equal)", () => {
  const message = SInt64LT.fromJson({});
  expect(message).toBeInvalid(SInt64LTSchema, 1);
});

it("sint64 - lt - invalid", () => {
  const message = SInt64LT.fromJson({"val":"1"});
  expect(message).toBeInvalid(SInt64LTSchema, 1);
});

it("sint64 - lte - valid", () => {
  const message = SInt64LTE.fromJson({"val":"63"});
  expect(message).toBeValid(SInt64LTESchema);
});

it("sint64 - lte - valid (equal)", () => {
  const message = SInt64LTE.fromJson({"val":"64"});
  expect(message).toBeValid(SInt64LTESchema);
});

it("sint64 - lte - invalid", () => {
  const message = SInt64LTE.fromJson({"val":"65"});
  expect(message).toBeInvalid(SInt64LTESchema, 1);
});

it("sint64 - gt - valid", () => {
  const message = SInt64GT.fromJson({"val":"17"});
  expect(message).toBeValid(SInt64GTSchema);
});

it("sint64 - gt - invalid (equal)", () => {
  const message = SInt64GT.fromJson({"val":"16"});
  expect(message).toBeInvalid(SInt64GTSchema, 1);
});

it("sint64 - gt - invalid", () => {
  const message = SInt64GT.fromJson({"val":"15"});
  expect(message).toBeInvalid(SInt64GTSchema, 1);
});

it("sint64 - gte - valid", () => {
  const message = SInt64GTE.fromJson({"val":"9"});
  expect(message).toBeValid(SInt64GTESchema);
});

it("sint64 - gte - valid (equal)", () => {
  const message = SInt64GTE.fromJson({"val":"8"});
  expect(message).toBeValid(SInt64GTESchema);
});

it("sint64 - gte - invalid", () => {
  const message = SInt64GTE.fromJson({"val":"7"});
  expect(message).toBeInvalid(SInt64GTESchema, 1);
});

it("sint64 - gt & lt - valid", () => {
  const message = SInt64GTLT.fromJson({"val":"5"});
  expect(message).toBeValid(SInt64GTLTSchema);
});

it("sint64 - gt & lt - invalid (above)", () => {
  const message = SInt64GTLT.fromJson({"val":"11"});
  expect(message).toBeInvalid(SInt64GTLTSchema, 1);
});

it("sint64 - gt & lt - invalid (below)", () => {
  const message = SInt64GTLT.fromJson({"val":"-1"});
  expect(message).toBeInvalid(SInt64GTLTSchema, 1);
});

it("sint64 - gt & lt - invalid (max)", () => {
  const message = SInt64GTLT.fromJson({"val":"10"});
  expect(message).toBeInvalid(SInt64GTLTSchema, 1);
});

it("sint64 - gt & lt - invalid (min)", () => {
  const message = SInt64GTLT.fromJson({});
  expect(message).toBeInvalid(SInt64GTLTSchema, 1);
});

it("sint64 - exclusive gt & lt - valid (above)", () => {
  const message = SInt64ExLTGT.fromJson({"val":"11"});
  expect(message).toBeValid(SInt64ExLTGTSchema);
});

it("sint64 - exclusive gt & lt - valid (below)", () => {
  const message = SInt64ExLTGT.fromJson({"val":"-1"});
  expect(message).toBeValid(SInt64ExLTGTSchema);
});

it("sint64 - exclusive gt & lt - invalid", () => {
  const message = SInt64ExLTGT.fromJson({"val":"5"});
  expect(message).toBeInvalid(SInt64ExLTGTSchema, 1);
});

it("sint64 - exclusive gt & lt - invalid (max)", () => {
  const message = SInt64ExLTGT.fromJson({"val":"10"});
  expect(message).toBeInvalid(SInt64ExLTGTSchema, 1);
});

it("sint64 - exclusive gt & lt - invalid (min)", () => {
  const message = SInt64ExLTGT.fromJson({});
  expect(message).toBeInvalid(SInt64ExLTGTSchema, 1);
});

it("sint64 - gte & lte - valid", () => {
  const message = SInt64GTELTE.fromJson({"val":"200"});
  expect(message).toBeValid(SInt64GTELTESchema);
});

it("sint64 - gte & lte - valid (max)", () => {
  const message = SInt64GTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(SInt64GTELTESchema);
});

it("sint64 - gte & lte - valid (min)", () => {
  const message = SInt64GTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(SInt64GTELTESchema);
});

it("sint64 - gte & lte - invalid (above)", () => {
  const message = SInt64GTELTE.fromJson({"val":"300"});
  expect(message).toBeInvalid(SInt64GTELTESchema, 1);
});

it("sint64 - gte & lte - invalid (below)", () => {
  const message = SInt64GTELTE.fromJson({"val":"100"});
  expect(message).toBeInvalid(SInt64GTELTESchema, 1);
});

it("sint64 - exclusive gte & lte - valid (above)", () => {
  const message = SInt64ExGTELTE.fromJson({"val":"300"});
  expect(message).toBeValid(SInt64ExGTELTESchema);
});

it("sint64 - exclusive gte & lte - valid (below)", () => {
  const message = SInt64ExGTELTE.fromJson({"val":"100"});
  expect(message).toBeValid(SInt64ExGTELTESchema);
});

it("sint64 - exclusive gte & lte - valid (max)", () => {
  const message = SInt64ExGTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(SInt64ExGTELTESchema);
});

it("sint64 - exclusive gte & lte - valid (min)", () => {
  const message = SInt64ExGTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(SInt64ExGTELTESchema);
});

it("sint64 - exclusive gte & lte - invalid", () => {
  const message = SInt64ExGTELTE.fromJson({"val":"200"});
  expect(message).toBeInvalid(SInt64ExGTELTESchema, 1);
});

it("sint64 - ignore_empty gte & lte - valid", () => {
  const message = SInt64Ignore.fromJson({});
  expect(message).toBeValid(SInt64IgnoreSchema);
});

it("fixed32 - none - valid", () => {
  const message = Fixed32None.fromJson({"val":123});
  expect(message).toBeValid(Fixed32NoneSchema);
});

it("fixed32 - const - valid", () => {
  const message = Fixed32Const.fromJson({"val":1});
  expect(message).toBeValid(Fixed32ConstSchema);
});

it("fixed32 - const - invalid", () => {
  const message = Fixed32Const.fromJson({"val":2});
  expect(message).toBeInvalid(Fixed32ConstSchema, 1);
});

it("fixed32 - in - valid", () => {
  const message = Fixed32In.fromJson({"val":3});
  expect(message).toBeValid(Fixed32InSchema);
});

it("fixed32 - in - invalid", () => {
  const message = Fixed32In.fromJson({"val":5});
  expect(message).toBeInvalid(Fixed32InSchema, 1);
});

it("fixed32 - not in - valid", () => {
  const message = Fixed32NotIn.fromJson({"val":1});
  expect(message).toBeValid(Fixed32NotInSchema);
});

it("fixed32 - not in - invalid", () => {
  const message = Fixed32NotIn.fromJson({});
  expect(message).toBeInvalid(Fixed32NotInSchema, 1);
});

it("fixed32 - lt - valid", () => {
  const message = Fixed32LT.fromJson({"val":4});
  expect(message).toBeValid(Fixed32LTSchema);
});

it("fixed32 - lt - invalid (equal)", () => {
  const message = Fixed32LT.fromJson({"val":5});
  expect(message).toBeInvalid(Fixed32LTSchema, 1);
});

it("fixed32 - lt - invalid", () => {
  const message = Fixed32LT.fromJson({"val":6});
  expect(message).toBeInvalid(Fixed32LTSchema, 1);
});

it("fixed32 - lte - valid", () => {
  const message = Fixed32LTE.fromJson({"val":63});
  expect(message).toBeValid(Fixed32LTESchema);
});

it("fixed32 - lte - valid (equal)", () => {
  const message = Fixed32LTE.fromJson({"val":64});
  expect(message).toBeValid(Fixed32LTESchema);
});

it("fixed32 - lte - invalid", () => {
  const message = Fixed32LTE.fromJson({"val":65});
  expect(message).toBeInvalid(Fixed32LTESchema, 1);
});

it("fixed32 - gt - valid", () => {
  const message = Fixed32GT.fromJson({"val":17});
  expect(message).toBeValid(Fixed32GTSchema);
});

it("fixed32 - gt - invalid (equal)", () => {
  const message = Fixed32GT.fromJson({"val":16});
  expect(message).toBeInvalid(Fixed32GTSchema, 1);
});

it("fixed32 - gt - invalid", () => {
  const message = Fixed32GT.fromJson({"val":15});
  expect(message).toBeInvalid(Fixed32GTSchema, 1);
});

it("fixed32 - gte - valid", () => {
  const message = Fixed32GTE.fromJson({"val":9});
  expect(message).toBeValid(Fixed32GTESchema);
});

it("fixed32 - gte - valid (equal)", () => {
  const message = Fixed32GTE.fromJson({"val":8});
  expect(message).toBeValid(Fixed32GTESchema);
});

it("fixed32 - gte - invalid", () => {
  const message = Fixed32GTE.fromJson({"val":7});
  expect(message).toBeInvalid(Fixed32GTESchema, 1);
});

it("fixed32 - gt & lt - valid", () => {
  const message = Fixed32GTLT.fromJson({"val":7});
  expect(message).toBeValid(Fixed32GTLTSchema);
});

it("fixed32 - gt & lt - invalid (above)", () => {
  const message = Fixed32GTLT.fromJson({"val":11});
  expect(message).toBeInvalid(Fixed32GTLTSchema, 1);
});

it("fixed32 - gt & lt - invalid (below)", () => {
  const message = Fixed32GTLT.fromJson({"val":1});
  expect(message).toBeInvalid(Fixed32GTLTSchema, 1);
});

it("fixed32 - gt & lt - invalid (max)", () => {
  const message = Fixed32GTLT.fromJson({"val":10});
  expect(message).toBeInvalid(Fixed32GTLTSchema, 1);
});

it("fixed32 - gt & lt - invalid (min)", () => {
  const message = Fixed32GTLT.fromJson({"val":5});
  expect(message).toBeInvalid(Fixed32GTLTSchema, 1);
});

it("fixed32 - exclusive gt & lt - valid (above)", () => {
  const message = Fixed32ExLTGT.fromJson({"val":11});
  expect(message).toBeValid(Fixed32ExLTGTSchema);
});

it("fixed32 - exclusive gt & lt - valid (below)", () => {
  const message = Fixed32ExLTGT.fromJson({"val":4});
  expect(message).toBeValid(Fixed32ExLTGTSchema);
});

it("fixed32 - exclusive gt & lt - invalid", () => {
  const message = Fixed32ExLTGT.fromJson({"val":7});
  expect(message).toBeInvalid(Fixed32ExLTGTSchema, 1);
});

it("fixed32 - exclusive gt & lt - invalid (max)", () => {
  const message = Fixed32ExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(Fixed32ExLTGTSchema, 1);
});

it("fixed32 - exclusive gt & lt - invalid (min)", () => {
  const message = Fixed32ExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(Fixed32ExLTGTSchema, 1);
});

it("fixed32 - gte & lte - valid", () => {
  const message = Fixed32GTELTE.fromJson({"val":200});
  expect(message).toBeValid(Fixed32GTELTESchema);
});

it("fixed32 - gte & lte - valid (max)", () => {
  const message = Fixed32GTELTE.fromJson({"val":256});
  expect(message).toBeValid(Fixed32GTELTESchema);
});

it("fixed32 - gte & lte - valid (min)", () => {
  const message = Fixed32GTELTE.fromJson({"val":128});
  expect(message).toBeValid(Fixed32GTELTESchema);
});

it("fixed32 - gte & lte - invalid (above)", () => {
  const message = Fixed32GTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(Fixed32GTELTESchema, 1);
});

it("fixed32 - gte & lte - invalid (below)", () => {
  const message = Fixed32GTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(Fixed32GTELTESchema, 1);
});

it("fixed32 - exclusive gte & lte - valid (above)", () => {
  const message = Fixed32ExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(Fixed32ExGTELTESchema);
});

it("fixed32 - exclusive gte & lte - valid (below)", () => {
  const message = Fixed32ExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(Fixed32ExGTELTESchema);
});

it("fixed32 - exclusive gte & lte - valid (max)", () => {
  const message = Fixed32ExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(Fixed32ExGTELTESchema);
});

it("fixed32 - exclusive gte & lte - valid (min)", () => {
  const message = Fixed32ExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(Fixed32ExGTELTESchema);
});

it("fixed32 - exclusive gte & lte - invalid", () => {
  const message = Fixed32ExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(Fixed32ExGTELTESchema, 1);
});

it("fixed32 - ignore_empty gte & lte - valid", () => {
  const message = Fixed32Ignore.fromJson({});
  expect(message).toBeValid(Fixed32IgnoreSchema);
});

it("fixed64 - none - valid", () => {
  const message = Fixed64None.fromJson({"val":"123"});
  expect(message).toBeValid(Fixed64NoneSchema);
});

it("fixed64 - const - valid", () => {
  const message = Fixed64Const.fromJson({"val":"1"});
  expect(message).toBeValid(Fixed64ConstSchema);
});

it("fixed64 - const - invalid", () => {
  const message = Fixed64Const.fromJson({"val":"2"});
  expect(message).toBeInvalid(Fixed64ConstSchema, 1);
});

it("fixed64 - in - valid", () => {
  const message = Fixed64In.fromJson({"val":"3"});
  expect(message).toBeValid(Fixed64InSchema);
});

it("fixed64 - in - invalid", () => {
  const message = Fixed64In.fromJson({"val":"5"});
  expect(message).toBeInvalid(Fixed64InSchema, 1);
});

it("fixed64 - not in - valid", () => {
  const message = Fixed64NotIn.fromJson({"val":"1"});
  expect(message).toBeValid(Fixed64NotInSchema);
});

it("fixed64 - not in - invalid", () => {
  const message = Fixed64NotIn.fromJson({});
  expect(message).toBeInvalid(Fixed64NotInSchema, 1);
});

it("fixed64 - lt - valid", () => {
  const message = Fixed64LT.fromJson({"val":"4"});
  expect(message).toBeValid(Fixed64LTSchema);
});

it("fixed64 - lt - invalid (equal)", () => {
  const message = Fixed64LT.fromJson({"val":"5"});
  expect(message).toBeInvalid(Fixed64LTSchema, 1);
});

it("fixed64 - lt - invalid", () => {
  const message = Fixed64LT.fromJson({"val":"6"});
  expect(message).toBeInvalid(Fixed64LTSchema, 1);
});

it("fixed64 - lte - valid", () => {
  const message = Fixed64LTE.fromJson({"val":"63"});
  expect(message).toBeValid(Fixed64LTESchema);
});

it("fixed64 - lte - valid (equal)", () => {
  const message = Fixed64LTE.fromJson({"val":"64"});
  expect(message).toBeValid(Fixed64LTESchema);
});

it("fixed64 - lte - invalid", () => {
  const message = Fixed64LTE.fromJson({"val":"65"});
  expect(message).toBeInvalid(Fixed64LTESchema, 1);
});

it("fixed64 - gt - valid", () => {
  const message = Fixed64GT.fromJson({"val":"17"});
  expect(message).toBeValid(Fixed64GTSchema);
});

it("fixed64 - gt - invalid (equal)", () => {
  const message = Fixed64GT.fromJson({"val":"16"});
  expect(message).toBeInvalid(Fixed64GTSchema, 1);
});

it("fixed64 - gt - invalid", () => {
  const message = Fixed64GT.fromJson({"val":"15"});
  expect(message).toBeInvalid(Fixed64GTSchema, 1);
});

it("fixed64 - gte - valid", () => {
  const message = Fixed64GTE.fromJson({"val":"9"});
  expect(message).toBeValid(Fixed64GTESchema);
});

it("fixed64 - gte - valid (equal)", () => {
  const message = Fixed64GTE.fromJson({"val":"8"});
  expect(message).toBeValid(Fixed64GTESchema);
});

it("fixed64 - gte - invalid", () => {
  const message = Fixed64GTE.fromJson({"val":"7"});
  expect(message).toBeInvalid(Fixed64GTESchema, 1);
});

it("fixed64 - gt & lt - valid", () => {
  const message = Fixed64GTLT.fromJson({"val":"7"});
  expect(message).toBeValid(Fixed64GTLTSchema);
});

it("fixed64 - gt & lt - invalid (above)", () => {
  const message = Fixed64GTLT.fromJson({"val":"11"});
  expect(message).toBeInvalid(Fixed64GTLTSchema, 1);
});

it("fixed64 - gt & lt - invalid (below)", () => {
  const message = Fixed64GTLT.fromJson({"val":"1"});
  expect(message).toBeInvalid(Fixed64GTLTSchema, 1);
});

it("fixed64 - gt & lt - invalid (max)", () => {
  const message = Fixed64GTLT.fromJson({"val":"10"});
  expect(message).toBeInvalid(Fixed64GTLTSchema, 1);
});

it("fixed64 - gt & lt - invalid (min)", () => {
  const message = Fixed64GTLT.fromJson({"val":"5"});
  expect(message).toBeInvalid(Fixed64GTLTSchema, 1);
});

it("fixed64 - exclusive gt & lt - valid (above)", () => {
  const message = Fixed64ExLTGT.fromJson({"val":"11"});
  expect(message).toBeValid(Fixed64ExLTGTSchema);
});

it("fixed64 - exclusive gt & lt - valid (below)", () => {
  const message = Fixed64ExLTGT.fromJson({"val":"4"});
  expect(message).toBeValid(Fixed64ExLTGTSchema);
});

it("fixed64 - exclusive gt & lt - invalid", () => {
  const message = Fixed64ExLTGT.fromJson({"val":"7"});
  expect(message).toBeInvalid(Fixed64ExLTGTSchema, 1);
});

it("fixed64 - exclusive gt & lt - invalid (max)", () => {
  const message = Fixed64ExLTGT.fromJson({"val":"10"});
  expect(message).toBeInvalid(Fixed64ExLTGTSchema, 1);
});

it("fixed64 - exclusive gt & lt - invalid (min)", () => {
  const message = Fixed64ExLTGT.fromJson({"val":"5"});
  expect(message).toBeInvalid(Fixed64ExLTGTSchema, 1);
});

it("fixed64 - gte & lte - valid", () => {
  const message = Fixed64GTELTE.fromJson({"val":"200"});
  expect(message).toBeValid(Fixed64GTELTESchema);
});

it("fixed64 - gte & lte - valid (max)", () => {
  const message = Fixed64GTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(Fixed64GTELTESchema);
});

it("fixed64 - gte & lte - valid (min)", () => {
  const message = Fixed64GTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(Fixed64GTELTESchema);
});

it("fixed64 - gte & lte - invalid (above)", () => {
  const message = Fixed64GTELTE.fromJson({"val":"300"});
  expect(message).toBeInvalid(Fixed64GTELTESchema, 1);
});

it("fixed64 - gte & lte - invalid (below)", () => {
  const message = Fixed64GTELTE.fromJson({"val":"100"});
  expect(message).toBeInvalid(Fixed64GTELTESchema, 1);
});

it("fixed64 - exclusive gte & lte - valid (above)", () => {
  const message = Fixed64ExGTELTE.fromJson({"val":"300"});
  expect(message).toBeValid(Fixed64ExGTELTESchema);
});

it("fixed64 - exclusive gte & lte - valid (below)", () => {
  const message = Fixed64ExGTELTE.fromJson({"val":"100"});
  expect(message).toBeValid(Fixed64ExGTELTESchema);
});

it("fixed64 - exclusive gte & lte - valid (max)", () => {
  const message = Fixed64ExGTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(Fixed64ExGTELTESchema);
});

it("fixed64 - exclusive gte & lte - valid (min)", () => {
  const message = Fixed64ExGTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(Fixed64ExGTELTESchema);
});

it("fixed64 - exclusive gte & lte - invalid", () => {
  const message = Fixed64ExGTELTE.fromJson({"val":"200"});
  expect(message).toBeInvalid(Fixed64ExGTELTESchema, 1);
});

it("fixed64 - ignore_empty gte & lte - valid", () => {
  const message = Fixed64Ignore.fromJson({});
  expect(message).toBeValid(Fixed64IgnoreSchema);
});

it("sfixed32 - none - valid", () => {
  const message = SFixed32None.fromJson({"val":123});
  expect(message).toBeValid(SFixed32NoneSchema);
});

it("sfixed32 - const - valid", () => {
  const message = SFixed32Const.fromJson({"val":1});
  expect(message).toBeValid(SFixed32ConstSchema);
});

it("sfixed32 - const - invalid", () => {
  const message = SFixed32Const.fromJson({"val":2});
  expect(message).toBeInvalid(SFixed32ConstSchema, 1);
});

it("sfixed32 - in - valid", () => {
  const message = SFixed32In.fromJson({"val":3});
  expect(message).toBeValid(SFixed32InSchema);
});

it("sfixed32 - in - invalid", () => {
  const message = SFixed32In.fromJson({"val":5});
  expect(message).toBeInvalid(SFixed32InSchema, 1);
});

it("sfixed32 - not in - valid", () => {
  const message = SFixed32NotIn.fromJson({"val":1});
  expect(message).toBeValid(SFixed32NotInSchema);
});

it("sfixed32 - not in - invalid", () => {
  const message = SFixed32NotIn.fromJson({});
  expect(message).toBeInvalid(SFixed32NotInSchema, 1);
});

it("sfixed32 - lt - valid", () => {
  const message = SFixed32LT.fromJson({"val":-1});
  expect(message).toBeValid(SFixed32LTSchema);
});

it("sfixed32 - lt - invalid (equal)", () => {
  const message = SFixed32LT.fromJson({});
  expect(message).toBeInvalid(SFixed32LTSchema, 1);
});

it("sfixed32 - lt - invalid", () => {
  const message = SFixed32LT.fromJson({"val":1});
  expect(message).toBeInvalid(SFixed32LTSchema, 1);
});

it("sfixed32 - lte - valid", () => {
  const message = SFixed32LTE.fromJson({"val":63});
  expect(message).toBeValid(SFixed32LTESchema);
});

it("sfixed32 - lte - valid (equal)", () => {
  const message = SFixed32LTE.fromJson({"val":64});
  expect(message).toBeValid(SFixed32LTESchema);
});

it("sfixed32 - lte - invalid", () => {
  const message = SFixed32LTE.fromJson({"val":65});
  expect(message).toBeInvalid(SFixed32LTESchema, 1);
});

it("sfixed32 - gt - valid", () => {
  const message = SFixed32GT.fromJson({"val":17});
  expect(message).toBeValid(SFixed32GTSchema);
});

it("sfixed32 - gt - invalid (equal)", () => {
  const message = SFixed32GT.fromJson({"val":16});
  expect(message).toBeInvalid(SFixed32GTSchema, 1);
});

it("sfixed32 - gt - invalid", () => {
  const message = SFixed32GT.fromJson({"val":15});
  expect(message).toBeInvalid(SFixed32GTSchema, 1);
});

it("sfixed32 - gte - valid", () => {
  const message = SFixed32GTE.fromJson({"val":9});
  expect(message).toBeValid(SFixed32GTESchema);
});

it("sfixed32 - gte - valid (equal)", () => {
  const message = SFixed32GTE.fromJson({"val":8});
  expect(message).toBeValid(SFixed32GTESchema);
});

it("sfixed32 - gte - invalid", () => {
  const message = SFixed32GTE.fromJson({"val":7});
  expect(message).toBeInvalid(SFixed32GTESchema, 1);
});

it("sfixed32 - gt & lt - valid", () => {
  const message = SFixed32GTLT.fromJson({"val":5});
  expect(message).toBeValid(SFixed32GTLTSchema);
});

it("sfixed32 - gt & lt - invalid (above)", () => {
  const message = SFixed32GTLT.fromJson({"val":11});
  expect(message).toBeInvalid(SFixed32GTLTSchema, 1);
});

it("sfixed32 - gt & lt - invalid (below)", () => {
  const message = SFixed32GTLT.fromJson({"val":-1});
  expect(message).toBeInvalid(SFixed32GTLTSchema, 1);
});

it("sfixed32 - gt & lt - invalid (max)", () => {
  const message = SFixed32GTLT.fromJson({"val":10});
  expect(message).toBeInvalid(SFixed32GTLTSchema, 1);
});

it("sfixed32 - gt & lt - invalid (min)", () => {
  const message = SFixed32GTLT.fromJson({});
  expect(message).toBeInvalid(SFixed32GTLTSchema, 1);
});

it("sfixed32 - exclusive gt & lt - valid (above)", () => {
  const message = SFixed32ExLTGT.fromJson({"val":11});
  expect(message).toBeValid(SFixed32ExLTGTSchema);
});

it("sfixed32 - exclusive gt & lt - valid (below)", () => {
  const message = SFixed32ExLTGT.fromJson({"val":-1});
  expect(message).toBeValid(SFixed32ExLTGTSchema);
});

it("sfixed32 - exclusive gt & lt - invalid", () => {
  const message = SFixed32ExLTGT.fromJson({"val":5});
  expect(message).toBeInvalid(SFixed32ExLTGTSchema, 1);
});

it("sfixed32 - exclusive gt & lt - invalid (max)", () => {
  const message = SFixed32ExLTGT.fromJson({"val":10});
  expect(message).toBeInvalid(SFixed32ExLTGTSchema, 1);
});

it("sfixed32 - exclusive gt & lt - invalid (min)", () => {
  const message = SFixed32ExLTGT.fromJson({});
  expect(message).toBeInvalid(SFixed32ExLTGTSchema, 1);
});

it("sfixed32 - gte & lte - valid", () => {
  const message = SFixed32GTELTE.fromJson({"val":200});
  expect(message).toBeValid(SFixed32GTELTESchema);
});

it("sfixed32 - gte & lte - valid (max)", () => {
  const message = SFixed32GTELTE.fromJson({"val":256});
  expect(message).toBeValid(SFixed32GTELTESchema);
});

it("sfixed32 - gte & lte - valid (min)", () => {
  const message = SFixed32GTELTE.fromJson({"val":128});
  expect(message).toBeValid(SFixed32GTELTESchema);
});

it("sfixed32 - gte & lte - invalid (above)", () => {
  const message = SFixed32GTELTE.fromJson({"val":300});
  expect(message).toBeInvalid(SFixed32GTELTESchema, 1);
});

it("sfixed32 - gte & lte - invalid (below)", () => {
  const message = SFixed32GTELTE.fromJson({"val":100});
  expect(message).toBeInvalid(SFixed32GTELTESchema, 1);
});

it("sfixed32 - exclusive gte & lte - valid (above)", () => {
  const message = SFixed32ExGTELTE.fromJson({"val":300});
  expect(message).toBeValid(SFixed32ExGTELTESchema);
});

it("sfixed32 - exclusive gte & lte - valid (below)", () => {
  const message = SFixed32ExGTELTE.fromJson({"val":100});
  expect(message).toBeValid(SFixed32ExGTELTESchema);
});

it("sfixed32 - exclusive gte & lte - valid (max)", () => {
  const message = SFixed32ExGTELTE.fromJson({"val":256});
  expect(message).toBeValid(SFixed32ExGTELTESchema);
});

it("sfixed32 - exclusive gte & lte - valid (min)", () => {
  const message = SFixed32ExGTELTE.fromJson({"val":128});
  expect(message).toBeValid(SFixed32ExGTELTESchema);
});

it("sfixed32 - exclusive gte & lte - invalid", () => {
  const message = SFixed32ExGTELTE.fromJson({"val":200});
  expect(message).toBeInvalid(SFixed32ExGTELTESchema, 1);
});

it("sfixed32 - ignore_empty gte & lte - valid", () => {
  const message = SFixed32Ignore.fromJson({});
  expect(message).toBeValid(SFixed32IgnoreSchema);
});

it("sfixed64 - none - valid", () => {
  const message = SFixed64None.fromJson({"val":"123"});
  expect(message).toBeValid(SFixed64NoneSchema);
});

it("sfixed64 - const - valid", () => {
  const message = SFixed64Const.fromJson({"val":"1"});
  expect(message).toBeValid(SFixed64ConstSchema);
});

it("sfixed64 - const - invalid", () => {
  const message = SFixed64Const.fromJson({"val":"2"});
  expect(message).toBeInvalid(SFixed64ConstSchema, 1);
});

it("sfixed64 - in - valid", () => {
  const message = SFixed64In.fromJson({"val":"3"});
  expect(message).toBeValid(SFixed64InSchema);
});

it("sfixed64 - in - invalid", () => {
  const message = SFixed64In.fromJson({"val":"5"});
  expect(message).toBeInvalid(SFixed64InSchema, 1);
});

it("sfixed64 - not in - valid", () => {
  const message = SFixed64NotIn.fromJson({"val":"1"});
  expect(message).toBeValid(SFixed64NotInSchema);
});

it("sfixed64 - not in - invalid", () => {
  const message = SFixed64NotIn.fromJson({});
  expect(message).toBeInvalid(SFixed64NotInSchema, 1);
});

it("sfixed64 - lt - valid", () => {
  const message = SFixed64LT.fromJson({"val":"-1"});
  expect(message).toBeValid(SFixed64LTSchema);
});

it("sfixed64 - lt - invalid (equal)", () => {
  const message = SFixed64LT.fromJson({});
  expect(message).toBeInvalid(SFixed64LTSchema, 1);
});

it("sfixed64 - lt - invalid", () => {
  const message = SFixed64LT.fromJson({"val":"1"});
  expect(message).toBeInvalid(SFixed64LTSchema, 1);
});

it("sfixed64 - lte - valid", () => {
  const message = SFixed64LTE.fromJson({"val":"63"});
  expect(message).toBeValid(SFixed64LTESchema);
});

it("sfixed64 - lte - valid (equal)", () => {
  const message = SFixed64LTE.fromJson({"val":"64"});
  expect(message).toBeValid(SFixed64LTESchema);
});

it("sfixed64 - lte - invalid", () => {
  const message = SFixed64LTE.fromJson({"val":"65"});
  expect(message).toBeInvalid(SFixed64LTESchema, 1);
});

it("sfixed64 - gt - valid", () => {
  const message = SFixed64GT.fromJson({"val":"17"});
  expect(message).toBeValid(SFixed64GTSchema);
});

it("sfixed64 - gt - invalid (equal)", () => {
  const message = SFixed64GT.fromJson({"val":"16"});
  expect(message).toBeInvalid(SFixed64GTSchema, 1);
});

it("sfixed64 - gt - invalid", () => {
  const message = SFixed64GT.fromJson({"val":"15"});
  expect(message).toBeInvalid(SFixed64GTSchema, 1);
});

it("sfixed64 - gte - valid", () => {
  const message = SFixed64GTE.fromJson({"val":"9"});
  expect(message).toBeValid(SFixed64GTESchema);
});

it("sfixed64 - gte - valid (equal)", () => {
  const message = SFixed64GTE.fromJson({"val":"8"});
  expect(message).toBeValid(SFixed64GTESchema);
});

it("sfixed64 - gte - invalid", () => {
  const message = SFixed64GTE.fromJson({"val":"7"});
  expect(message).toBeInvalid(SFixed64GTESchema, 1);
});

it("sfixed64 - gt & lt - valid", () => {
  const message = SFixed64GTLT.fromJson({"val":"5"});
  expect(message).toBeValid(SFixed64GTLTSchema);
});

it("sfixed64 - gt & lt - invalid (above)", () => {
  const message = SFixed64GTLT.fromJson({"val":"11"});
  expect(message).toBeInvalid(SFixed64GTLTSchema, 1);
});

it("sfixed64 - gt & lt - invalid (below)", () => {
  const message = SFixed64GTLT.fromJson({"val":"-1"});
  expect(message).toBeInvalid(SFixed64GTLTSchema, 1);
});

it("sfixed64 - gt & lt - invalid (max)", () => {
  const message = SFixed64GTLT.fromJson({"val":"10"});
  expect(message).toBeInvalid(SFixed64GTLTSchema, 1);
});

it("sfixed64 - gt & lt - invalid (min)", () => {
  const message = SFixed64GTLT.fromJson({});
  expect(message).toBeInvalid(SFixed64GTLTSchema, 1);
});

it("sfixed64 - exclusive gt & lt - valid (above)", () => {
  const message = SFixed64ExLTGT.fromJson({"val":"11"});
  expect(message).toBeValid(SFixed64ExLTGTSchema);
});

it("sfixed64 - exclusive gt & lt - valid (below)", () => {
  const message = SFixed64ExLTGT.fromJson({"val":"-1"});
  expect(message).toBeValid(SFixed64ExLTGTSchema);
});

it("sfixed64 - exclusive gt & lt - invalid", () => {
  const message = SFixed64ExLTGT.fromJson({"val":"5"});
  expect(message).toBeInvalid(SFixed64ExLTGTSchema, 1);
});

it("sfixed64 - exclusive gt & lt - invalid (max)", () => {
  const message = SFixed64ExLTGT.fromJson({"val":"10"});
  expect(message).toBeInvalid(SFixed64ExLTGTSchema, 1);
});

it("sfixed64 - exclusive gt & lt - invalid (min)", () => {
  const message = SFixed64ExLTGT.fromJson({});
  expect(message).toBeInvalid(SFixed64ExLTGTSchema, 1);
});

it("sfixed64 - gte & lte - valid", () => {
  const message = SFixed64GTELTE.fromJson({"val":"200"});
  expect(message).toBeValid(SFixed64GTELTESchema);
});

it("sfixed64 - gte & lte - valid (max)", () => {
  const message = SFixed64GTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(SFixed64GTELTESchema);
});

it("sfixed64 - gte & lte - valid (min)", () => {
  const message = SFixed64GTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(SFixed64GTELTESchema);
});

it("sfixed64 - gte & lte - invalid (above)", () => {
  const message = SFixed64GTELTE.fromJson({"val":"300"});
  expect(message).toBeInvalid(SFixed64GTELTESchema, 1);
});

it("sfixed64 - gte & lte - invalid (below)", () => {
  const message = SFixed64GTELTE.fromJson({"val":"100"});
  expect(message).toBeInvalid(SFixed64GTELTESchema, 1);
});

it("sfixed64 - exclusive gte & lte - valid (above)", () => {
  const message = SFixed64ExGTELTE.fromJson({"val":"300"});
  expect(message).toBeValid(SFixed64ExGTELTESchema);
});

it("sfixed64 - exclusive gte & lte - valid (below)", () => {
  const message = SFixed64ExGTELTE.fromJson({"val":"100"});
  expect(message).toBeValid(SFixed64ExGTELTESchema);
});

it("sfixed64 - exclusive gte & lte - valid (max)", () => {
  const message = SFixed64ExGTELTE.fromJson({"val":"256"});
  expect(message).toBeValid(SFixed64ExGTELTESchema);
});

it("sfixed64 - exclusive gte & lte - valid (min)", () => {
  const message = SFixed64ExGTELTE.fromJson({"val":"128"});
  expect(message).toBeValid(SFixed64ExGTELTESchema);
});

it("sfixed64 - exclusive gte & lte - invalid", () => {
  const message = SFixed64ExGTELTE.fromJson({"val":"200"});
  expect(message).toBeInvalid(SFixed64ExGTELTESchema, 1);
});

it("sfixed64 - ignore_empty gte & lte - valid", () => {
  const message = SFixed64Ignore.fromJson({});
  expect(message).toBeValid(SFixed64IgnoreSchema);
});
