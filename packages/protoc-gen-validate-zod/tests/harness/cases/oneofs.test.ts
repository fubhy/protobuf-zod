// @generated by protoc-gen-validate-zod-test v0.0.1-dev with parameter "target=ts,cases=packages/protoc-gen-validate-zod/tests/cases.txt"
// @generated from file tests/harness/cases/oneofs.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {expect, it} from "vitest";
import {OneOf, OneOfIgnoreEmpty, OneOfNone, OneOfRequired} from "./oneofs_pb.js";
import {OneOfIgnoreEmptySchema, OneOfNoneSchema, OneOfRequiredSchema, OneOfSchema} from "./oneofs_zod.js";

it("oneof - none - valid", () => {
  const message = OneOfNone.fromJson({"x":"foo"});
  expect(message).toBeValid(OneOfNoneSchema);
});

it("oneof - none - valid (empty)", () => {
  const message = OneOfNone.fromJson({});
  expect(message).toBeValid(OneOfNoneSchema);
});

it("oneof - field - valid (X)", () => {
  const message = OneOf.fromJson({"x":"foobar"});
  expect(message).toBeValid(OneOfSchema);
});

it("oneof - field - valid (Y)", () => {
  const message = OneOf.fromJson({"y":123});
  expect(message).toBeValid(OneOfSchema);
});

it("oneof - field - valid (Z)", () => {
  const message = OneOf.fromJson({"z":{"val":true}});
  expect(message).toBeValid(OneOfSchema);
});

it("oneof - field - valid (empty)", () => {
  const message = OneOf.fromJson({});
  expect(message).toBeValid(OneOfSchema);
});

it("oneof - field - invalid (X)", () => {
  const message = OneOf.fromJson({"x":"fizzbuzz"});
  expect(message).toBeInvalid(OneOfSchema, 1);
});

it("oneof - field - invalid (Y)", () => {
  const message = OneOf.fromJson({"y":-1});
  expect(message).toBeInvalid(OneOfSchema, 1);
});

it("oneof - filed - invalid (Z)", () => {
  const message = OneOf.fromJson({"z":{}});
  expect(message).toBeInvalid(OneOfSchema, 1);
});

it("oneof - required - valid", () => {
  const message = OneOfRequired.fromJson({"x":""});
  expect(message).toBeValid(OneOfRequiredSchema);
});

it("oneof - require - invalid", () => {
  const message = OneOfRequired.fromJson({});
  expect(message).toBeInvalid(OneOfRequiredSchema, 1);
});

it("oneof - ignore_empty - valid (X)", () => {
  const message = OneOfIgnoreEmpty.fromJson({"x":""});
  expect(message).toBeValid(OneOfIgnoreEmptySchema);
});

it("oneof - ignore_empty - valid (Y)", () => {
  const message = OneOfIgnoreEmpty.fromJson({"y":""});
  expect(message).toBeValid(OneOfIgnoreEmptySchema);
});

it("oneof - ignore_empty - valid (Z)", () => {
  const message = OneOfIgnoreEmpty.fromJson({"z":0});
  expect(message).toBeValid(OneOfIgnoreEmptySchema);
});
