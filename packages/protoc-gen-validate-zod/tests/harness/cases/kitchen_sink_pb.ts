// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/kitchen_sink.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Any, Duration, FloatValue, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum tests.harness.cases.ComplexTestEnum
 */
export enum ComplexTestEnum {
  /**
   * @generated from enum value: ComplexZero = 0;
   */
  ComplexZero = 0,

  /**
   * @generated from enum value: ComplexONE = 1;
   */
  ComplexONE = 1,

  /**
   * @generated from enum value: ComplexTWO = 2;
   */
  ComplexTWO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ComplexTestEnum)
proto3.util.setEnumType(ComplexTestEnum, "tests.harness.cases.ComplexTestEnum", [
  { no: 0, name: "ComplexZero" },
  { no: 1, name: "ComplexONE" },
  { no: 2, name: "ComplexTWO" },
]);

/**
 * @generated from message tests.harness.cases.ComplexTestMsg
 */
export class ComplexTestMsg extends Message<ComplexTestMsg> {
  /**
   * @generated from field: string const = 1;
   */
  const = "";

  /**
   * @generated from field: tests.harness.cases.ComplexTestMsg nested = 2;
   */
  nested?: ComplexTestMsg;

  /**
   * @generated from field: int32 int_const = 3;
   */
  intConst = 0;

  /**
   * @generated from field: bool bool_const = 4;
   */
  boolConst = false;

  /**
   * @generated from field: google.protobuf.FloatValue float_val = 5;
   */
  floatVal?: number;

  /**
   * @generated from field: google.protobuf.Duration dur_val = 6;
   */
  durVal?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp ts_val = 7;
   */
  tsVal?: Timestamp;

  /**
   * @generated from field: tests.harness.cases.ComplexTestMsg another = 8;
   */
  another?: ComplexTestMsg;

  /**
   * @generated from field: float float_const = 9;
   */
  floatConst = 0;

  /**
   * @generated from field: double double_in = 10;
   */
  doubleIn = 0;

  /**
   * @generated from field: tests.harness.cases.ComplexTestEnum enum_const = 11;
   */
  enumConst = ComplexTestEnum.ComplexZero;

  /**
   * @generated from field: google.protobuf.Any any_val = 12;
   */
  anyVal?: Any;

  /**
   * @generated from field: repeated google.protobuf.Timestamp rep_ts_val = 13;
   */
  repTsVal: Timestamp[] = [];

  /**
   * @generated from field: map<sint32, string> map_val = 14;
   */
  mapVal: { [key: number]: string } = {};

  /**
   * @generated from field: bytes bytes_val = 15;
   */
  bytesVal = new Uint8Array(0);

  /**
   * @generated from oneof tests.harness.cases.ComplexTestMsg.o
   */
  o:
    | {
        /**
         * @generated from field: string x = 16;
         */
        value: string;
        case: "x";
      }
    | {
        /**
         * @generated from field: int32 y = 17;
         */
        value: number;
        case: "y";
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ComplexTestMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.ComplexTestMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nested", kind: "message", T: ComplexTestMsg },
    { no: 3, name: "int_const", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "bool_const", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "float_val", kind: "message", T: FloatValue },
    { no: 6, name: "dur_val", kind: "message", T: Duration },
    { no: 7, name: "ts_val", kind: "message", T: Timestamp },
    { no: 8, name: "another", kind: "message", T: ComplexTestMsg },
    { no: 9, name: "float_const", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "double_in", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "enum_const", kind: "enum", T: proto3.getEnumType(ComplexTestEnum) },
    { no: 12, name: "any_val", kind: "message", T: Any },
    { no: 13, name: "rep_ts_val", kind: "message", T: Timestamp, repeated: true },
    {
      no: 14,
      name: "map_val",
      kind: "map",
      K: 17 /* ScalarType.SINT32 */,
      V: { kind: "scalar", T: 9 /* ScalarType.STRING */ },
    },
    { no: 15, name: "bytes_val", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 16, name: "x", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "o" },
    { no: 17, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "o" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComplexTestMsg {
    return new ComplexTestMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComplexTestMsg {
    return new ComplexTestMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComplexTestMsg {
    return new ComplexTestMsg().fromJsonString(jsonString, options);
  }

  static equals(
    a: ComplexTestMsg | PlainMessage<ComplexTestMsg> | undefined,
    b: ComplexTestMsg | PlainMessage<ComplexTestMsg> | undefined
  ): boolean {
    return proto3.util.equals(ComplexTestMsg, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.KitchenSinkMessage
 */
export class KitchenSinkMessage extends Message<KitchenSinkMessage> {
  /**
   * @generated from field: tests.harness.cases.ComplexTestMsg val = 1;
   */
  val?: ComplexTestMsg;

  constructor(data?: PartialMessage<KitchenSinkMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.KitchenSinkMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: ComplexTestMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KitchenSinkMessage {
    return new KitchenSinkMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KitchenSinkMessage {
    return new KitchenSinkMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KitchenSinkMessage {
    return new KitchenSinkMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: KitchenSinkMessage | PlainMessage<KitchenSinkMessage> | undefined,
    b: KitchenSinkMessage | PlainMessage<KitchenSinkMessage> | undefined
  ): boolean {
    return proto3.util.equals(KitchenSinkMessage, a, b);
  }
}
