// @generated by protoc-gen-validate-zod v0.0.1-dev with parameter "target=ts"
// @generated from file tests/harness/cases/enums.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { z } from "zod";
import { TestEnum, TestEnumAlias } from "./enums_pb.js";
import { isIn, isNotIn, map, oneof } from "protobuf-zod";
import { Embed_DoubleEmbed_DoubleEnumeratedSchema, Embed_EnumeratedSchema } from "./other_package/embed_zod.js";
import { Embed_EnumeratedSchema as Embed_EnumeratedSchema$1 } from "./yet_another_package/embed_zod.js";

/**
 * @generated from enum tests.harness.cases.TestEnum
 */
export const TestEnumSchema = z.nativeEnum(TestEnum);

/**
 * @generated from enum tests.harness.cases.TestEnumAlias
 */
export const TestEnumAliasSchema = z.nativeEnum(TestEnumAlias);

/**
 * @generated from message tests.harness.cases.EnumNone
 */
export const EnumNoneSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnum val = 1;
   */
  val: z.lazy(() => TestEnumSchema),
});

/**
 * @generated from message tests.harness.cases.EnumConst
 */
export const EnumConstSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnum val = 1;
   * @validate  {"enum":{"const":2}}
   */
  val: z.lazy(() => TestEnumSchema).and(z.literal(2)),
});

/**
 * @generated from message tests.harness.cases.EnumAliasConst
 */
export const EnumAliasConstSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnumAlias val = 1;
   * @validate  {"enum":{"const":2}}
   */
  val: z.lazy(() => TestEnumAliasSchema).and(z.literal(2)),
});

/**
 * @generated from message tests.harness.cases.EnumDefined
 */
export const EnumDefinedSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnum val = 1;
   * @validate  {"enum":{"definedOnly":true}}
   */
  val: z.lazy(() => TestEnumSchema),
});

/**
 * @generated from message tests.harness.cases.EnumAliasDefined
 */
export const EnumAliasDefinedSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnumAlias val = 1;
   * @validate  {"enum":{"definedOnly":true}}
   */
  val: z.lazy(() => TestEnumAliasSchema),
});

/**
 * @generated from message tests.harness.cases.EnumIn
 */
export const EnumInSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnum val = 1;
   * @validate  {"enum":{"in":[0,2]}}
   */
  val: z.lazy(() => TestEnumSchema).refine(isIn([0, 2])),
});

/**
 * @generated from message tests.harness.cases.EnumAliasIn
 */
export const EnumAliasInSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnumAlias val = 1;
   * @validate  {"enum":{"in":[0,2]}}
   */
  val: z.lazy(() => TestEnumAliasSchema).refine(isIn([0, 2])),
});

/**
 * @generated from message tests.harness.cases.EnumNotIn
 */
export const EnumNotInSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnum val = 1;
   * @validate  {"enum":{"notIn":[1]}}
   */
  val: z.lazy(() => TestEnumSchema).refine(isNotIn([1])),
});

/**
 * @generated from message tests.harness.cases.EnumAliasNotIn
 */
export const EnumAliasNotInSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.TestEnumAlias val = 1;
   * @validate  {"enum":{"notIn":[1]}}
   */
  val: z.lazy(() => TestEnumAliasSchema).refine(isNotIn([1])),
});

/**
 * @generated from message tests.harness.cases.EnumExternal
 */
export const EnumExternalSchema = z.object({
  /**
   * @generated from field: tests.harness.cases.other_package.Embed.Enumerated val = 1;
   * @validate  {"enum":{"definedOnly":true}}
   */
  val: z.lazy(() => Embed_EnumeratedSchema),
});

/**
 * @generated from message tests.harness.cases.EnumExternal2
 */
export const EnumExternal2Schema = z.object({
  /**
   * @generated from field: tests.harness.cases.other_package.Embed.DoubleEmbed.DoubleEnumerated val = 1;
   * @validate  {"enum":{"definedOnly":true}}
   */
  val: z.lazy(() => Embed_DoubleEmbed_DoubleEnumeratedSchema),
});

/**
 * @generated from message tests.harness.cases.RepeatedEnumDefined
 */
export const RepeatedEnumDefinedSchema = z.object({
  /**
   * @generated from field: repeated tests.harness.cases.TestEnum val = 1;
   * @validate  {"repeated":{"items":{"enum":{"definedOnly":true}}}}
   */
  val: z.lazy(() => TestEnumSchema).array(),
});

/**
 * @generated from message tests.harness.cases.RepeatedExternalEnumDefined
 */
export const RepeatedExternalEnumDefinedSchema = z.object({
  /**
   * @generated from field: repeated tests.harness.cases.other_package.Embed.Enumerated val = 1;
   * @validate  {"repeated":{"items":{"enum":{"definedOnly":true}}}}
   */
  val: z.lazy(() => Embed_EnumeratedSchema).array(),
});

/**
 * @generated from message tests.harness.cases.RepeatedYetAnotherExternalEnumDefined
 */
export const RepeatedYetAnotherExternalEnumDefinedSchema = z.object({
  /**
   * @generated from field: repeated tests.harness.cases.yet_another_package.Embed.Enumerated val = 1;
   * @validate  {"repeated":{"items":{"enum":{"definedOnly":true}}}}
   */
  val: z.lazy(() => Embed_EnumeratedSchema$1).array(),
});

/**
 * @generated from message tests.harness.cases.MapEnumDefined
 */
export const MapEnumDefinedSchema = z.object({
  /**
   * @generated from field: map<string, tests.harness.cases.TestEnum> val = 1;
   * @validate  {"map":{"values":{"enum":{"definedOnly":true}}}}
   */
  val: map(
    z.string(),
    z.lazy(() => TestEnumSchema)
  ),
});

/**
 * @generated from message tests.harness.cases.MapExternalEnumDefined
 */
export const MapExternalEnumDefinedSchema = z.object({
  /**
   * @generated from field: map<string, tests.harness.cases.other_package.Embed.Enumerated> val = 1;
   * @validate  {"map":{"values":{"enum":{"definedOnly":true}}}}
   */
  val: map(
    z.string(),
    z.lazy(() => Embed_EnumeratedSchema)
  ),
});

/**
 * @generated from message tests.harness.cases.EnumInsideOneOf
 */
export const EnumInsideOneOfSchema = z.object({
  /**
   * @generated from oneof tests.harness.cases.EnumInsideOneOf.foo
   */
  foo: oneof([
    z.object({
      case: z.literal(undefined),
      value: z.literal(undefined).nullish(),
    }),
    z.object({
      /**
       * @generated from field: tests.harness.cases.TestEnum val = 1;
       * @validate  {"enum":{"definedOnly":true}}
       */
      case: z.literal("val"),
      value: z.lazy(() => TestEnumSchema),
    }),
  ]).nullish(),
  /**
   * @generated from oneof tests.harness.cases.EnumInsideOneOf.bar
   */
  bar: oneof([
    z.object({
      case: z.literal(undefined),
      value: z.literal(undefined).nullish(),
    }),
    z.object({
      /**
       * @generated from field: tests.harness.cases.TestEnum val2 = 2;
       * @validate  {"enum":{"definedOnly":true,"notIn":[0]}}
       */
      case: z.literal("val2"),
      value: z.lazy(() => TestEnumSchema).refine(isNotIn([0])),
    }),
  ]).nullish(),
});
