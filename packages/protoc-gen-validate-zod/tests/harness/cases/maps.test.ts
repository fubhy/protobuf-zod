// @generated by protoc-gen-validate-zod-test v0.0.1-dev with parameter "target=ts,cases=tests/fixtures/cases.txt"
// @generated from file tests/harness/cases/maps.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { expect, it } from "vitest";
import {
  MapExact,
  MapExactIgnore,
  MapKeys,
  MapKeysPattern,
  MapMax,
  MapMin,
  MapMinMax,
  MapNone,
  MapNoSparse,
  MapRecursive,
  MapValues,
  MapValuesPattern,
  MultipleMaps,
} from "./maps_pb.js";
import {
  MapExactIgnoreSchema,
  MapExactSchema,
  MapKeysPatternSchema,
  MapKeysSchema,
  MapMaxSchema,
  MapMinMaxSchema,
  MapMinSchema,
  MapNoneSchema,
  MapNoSparseSchema,
  MapRecursiveSchema,
  MapValuesPatternSchema,
  MapValuesSchema,
  MultipleMapsSchema,
} from "./maps_zod.js";

it("map - none - valid", () => {
  const message = MapNone.fromJson({ val: { "123": true, "456": false } });
  expect(message).toBeValid(MapNoneSchema);
});

it("map - min pairs - valid", () => {
  const message = MapMin.fromJson({ val: { "1": 2, "3": 4, "5": 6 } });
  expect(message).toBeValid(MapMinSchema);
});

it("map - min pairs - valid (equal)", () => {
  const message = MapMin.fromJson({ val: { "1": 2, "3": 4 } });
  expect(message).toBeValid(MapMinSchema);
});

it("map - min pairs - invalid", () => {
  const message = MapMin.fromJson({ val: { "1": 2 } });
  expect(message).toBeInvalid(MapMinSchema, 1);
});

it("map - max pairs - valid", () => {
  const message = MapMax.fromJson({ val: { "1": 2, "3": 4 } });
  expect(message).toBeValid(MapMaxSchema);
});

it("map - max pairs - valid (equal)", () => {
  const message = MapMax.fromJson({ val: { "1": 2, "3": 4, "5": 6 } });
  expect(message).toBeValid(MapMaxSchema);
});

it("map - max pairs - invalid", () => {
  const message = MapMax.fromJson({ val: { "1": 2, "3": 4, "5": 6, "7": 8 } });
  expect(message).toBeInvalid(MapMaxSchema, 1);
});

it("map - min/max - valid", () => {
  const message = MapMinMax.fromJson({ val: { a: true, b: false, c: true } });
  expect(message).toBeValid(MapMinMaxSchema);
});

it("map - min/max - valid (min)", () => {
  const message = MapMinMax.fromJson({ val: { a: true, b: false } });
  expect(message).toBeValid(MapMinMaxSchema);
});

it("map - min/max - valid (max)", () => {
  const message = MapMinMax.fromJson({ val: { a: true, b: false, c: true, d: false } });
  expect(message).toBeValid(MapMinMaxSchema);
});

it("map - min/max - invalid (below)", () => {
  const message = MapMinMax.fromJson({});
  expect(message).toBeInvalid(MapMinMaxSchema, 1);
});

it("map - min/max - invalid (above)", () => {
  const message = MapMinMax.fromJson({ val: { a: true, b: false, c: true, d: false, e: true } });
  expect(message).toBeInvalid(MapMinMaxSchema, 1);
});

it("map - exact - valid", () => {
  const message = MapExact.fromJson({ val: { "1": "a", "2": "b", "3": "c" } });
  expect(message).toBeValid(MapExactSchema);
});

it("map - exact - invalid (below)", () => {
  const message = MapExact.fromJson({ val: { "1": "a", "2": "b" } });
  expect(message).toBeInvalid(MapExactSchema, 1);
});

it("map - exact - invalid (above)", () => {
  const message = MapExact.fromJson({ val: { "1": "a", "2": "b", "3": "c", "4": "d" } });
  expect(message).toBeInvalid(MapExactSchema, 1);
});

it("map - no sparse - valid", () => {
  const message = MapNoSparse.fromJson({ val: { "1": {}, "2": {} } });
  expect(message).toBeValid(MapNoSparseSchema);
});

it("map - no sparse - valid (empty)", () => {
  const message = MapNoSparse.fromJson({});
  expect(message).toBeValid(MapNoSparseSchema);
});

it("map - keys - valid", () => {
  const message = MapKeys.fromJson({ val: { "-2": "b", "-1": "a" } });
  expect(message).toBeValid(MapKeysSchema);
});

it("map - keys - valid (empty)", () => {
  const message = MapKeys.fromJson({});
  expect(message).toBeValid(MapKeysSchema);
});

it("map - keys - valid (pattern)", () => {
  const message = MapKeysPattern.fromJson({ val: { A: "a" } });
  expect(message).toBeValid(MapKeysPatternSchema);
});

it("map - keys - invalid", () => {
  const message = MapKeys.fromJson({ val: { "1": "a" } });
  expect(message).toBeInvalid(MapKeysSchema, 1);
});

it("map - keys - invalid (pattern)", () => {
  const message = MapKeysPattern.fromJson({ val: { "!@#$%^&*()": "b", A: "a" } });
  expect(message).toBeInvalid(MapKeysPatternSchema, 1);
});

it("map - values - valid", () => {
  const message = MapValues.fromJson({ val: { a: "Alpha", b: "Beta" } });
  expect(message).toBeValid(MapValuesSchema);
});

it("map - values - valid (empty)", () => {
  const message = MapValues.fromJson({});
  expect(message).toBeValid(MapValuesSchema);
});

it("map - values - valid (pattern)", () => {
  const message = MapValuesPattern.fromJson({ val: { a: "A" } });
  expect(message).toBeValid(MapValuesPatternSchema);
});

it("map - values - invalid", () => {
  const message = MapValues.fromJson({ val: { a: "A", b: "B" } });
  expect(message).toBeInvalid(MapValuesSchema, 2);
});

it("map - values - invalid (pattern)", () => {
  const message = MapValuesPattern.fromJson({ val: { a: "A", b: "!@#$%^&*()" } });
  expect(message).toBeInvalid(MapValuesPatternSchema, 1);
});

it("map - recursive - valid", () => {
  const message = MapRecursive.fromJson({ val: { "1": { val: "abc" } } });
  expect(message).toBeValid(MapRecursiveSchema);
});

it("map - recursive - invalid", () => {
  const message = MapRecursive.fromJson({ val: { "1": {} } });
  expect(message).toBeInvalid(MapRecursiveSchema, 1);
});

it("map - exact - valid (ignore_empty)", () => {
  const message = MapExactIgnore.fromJson({});
  expect(message).toBeValid(MapExactIgnoreSchema);
});

it("map - multiple - valid", () => {
  const message = MultipleMaps.fromJson({ first: { "1": "a", "2": "b" }, second: { "-2": false, "-1": true } });
  expect(message).toBeValid(MultipleMapsSchema);
});
