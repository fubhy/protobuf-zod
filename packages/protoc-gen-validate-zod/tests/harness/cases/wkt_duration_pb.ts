// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/wkt_duration.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Duration, Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.DurationNone
 */
export class DurationNone extends Message<DurationNone> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationNone {
    return new DurationNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationNone {
    return new DurationNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationNone {
    return new DurationNone().fromJsonString(jsonString, options);
  }

  static equals(a: DurationNone | PlainMessage<DurationNone> | undefined, b: DurationNone | PlainMessage<DurationNone> | undefined): boolean {
    return proto3.util.equals(DurationNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationRequired
 */
export class DurationRequired extends Message<DurationRequired> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationRequired {
    return new DurationRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationRequired {
    return new DurationRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationRequired {
    return new DurationRequired().fromJsonString(jsonString, options);
  }

  static equals(a: DurationRequired | PlainMessage<DurationRequired> | undefined, b: DurationRequired | PlainMessage<DurationRequired> | undefined): boolean {
    return proto3.util.equals(DurationRequired, a, b);
  }
}

/**
 * TODO(htuch): Add a very large duration, e.g. {seconds: 315576000000}, once
 * #34 is resolved.
 *
 * @generated from message tests.harness.cases.DurationConst
 */
export class DurationConst extends Message<DurationConst> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationConst>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationConst";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationConst {
    return new DurationConst().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationConst {
    return new DurationConst().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationConst {
    return new DurationConst().fromJsonString(jsonString, options);
  }

  static equals(a: DurationConst | PlainMessage<DurationConst> | undefined, b: DurationConst | PlainMessage<DurationConst> | undefined): boolean {
    return proto3.util.equals(DurationConst, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationIn
 */
export class DurationIn extends Message<DurationIn> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationIn {
    return new DurationIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationIn {
    return new DurationIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationIn {
    return new DurationIn().fromJsonString(jsonString, options);
  }

  static equals(a: DurationIn | PlainMessage<DurationIn> | undefined, b: DurationIn | PlainMessage<DurationIn> | undefined): boolean {
    return proto3.util.equals(DurationIn, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationNotIn
 */
export class DurationNotIn extends Message<DurationNotIn> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationNotIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationNotIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationNotIn {
    return new DurationNotIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationNotIn {
    return new DurationNotIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationNotIn {
    return new DurationNotIn().fromJsonString(jsonString, options);
  }

  static equals(a: DurationNotIn | PlainMessage<DurationNotIn> | undefined, b: DurationNotIn | PlainMessage<DurationNotIn> | undefined): boolean {
    return proto3.util.equals(DurationNotIn, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationLT
 */
export class DurationLT extends Message<DurationLT> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationLT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationLT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationLT {
    return new DurationLT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationLT {
    return new DurationLT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationLT {
    return new DurationLT().fromJsonString(jsonString, options);
  }

  static equals(a: DurationLT | PlainMessage<DurationLT> | undefined, b: DurationLT | PlainMessage<DurationLT> | undefined): boolean {
    return proto3.util.equals(DurationLT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationLTE
 */
export class DurationLTE extends Message<DurationLTE> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationLTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationLTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationLTE {
    return new DurationLTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationLTE {
    return new DurationLTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationLTE {
    return new DurationLTE().fromJsonString(jsonString, options);
  }

  static equals(a: DurationLTE | PlainMessage<DurationLTE> | undefined, b: DurationLTE | PlainMessage<DurationLTE> | undefined): boolean {
    return proto3.util.equals(DurationLTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationGT
 */
export class DurationGT extends Message<DurationGT> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationGT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationGT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationGT {
    return new DurationGT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationGT {
    return new DurationGT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationGT {
    return new DurationGT().fromJsonString(jsonString, options);
  }

  static equals(a: DurationGT | PlainMessage<DurationGT> | undefined, b: DurationGT | PlainMessage<DurationGT> | undefined): boolean {
    return proto3.util.equals(DurationGT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationGTE
 */
export class DurationGTE extends Message<DurationGTE> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationGTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationGTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationGTE {
    return new DurationGTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationGTE {
    return new DurationGTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationGTE {
    return new DurationGTE().fromJsonString(jsonString, options);
  }

  static equals(a: DurationGTE | PlainMessage<DurationGTE> | undefined, b: DurationGTE | PlainMessage<DurationGTE> | undefined): boolean {
    return proto3.util.equals(DurationGTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationGTLT
 */
export class DurationGTLT extends Message<DurationGTLT> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationGTLT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationGTLT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationGTLT {
    return new DurationGTLT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationGTLT {
    return new DurationGTLT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationGTLT {
    return new DurationGTLT().fromJsonString(jsonString, options);
  }

  static equals(a: DurationGTLT | PlainMessage<DurationGTLT> | undefined, b: DurationGTLT | PlainMessage<DurationGTLT> | undefined): boolean {
    return proto3.util.equals(DurationGTLT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationExLTGT
 */
export class DurationExLTGT extends Message<DurationExLTGT> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationExLTGT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationExLTGT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationExLTGT {
    return new DurationExLTGT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationExLTGT {
    return new DurationExLTGT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationExLTGT {
    return new DurationExLTGT().fromJsonString(jsonString, options);
  }

  static equals(a: DurationExLTGT | PlainMessage<DurationExLTGT> | undefined, b: DurationExLTGT | PlainMessage<DurationExLTGT> | undefined): boolean {
    return proto3.util.equals(DurationExLTGT, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationGTELTE
 */
export class DurationGTELTE extends Message<DurationGTELTE> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationGTELTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationGTELTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationGTELTE {
    return new DurationGTELTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationGTELTE {
    return new DurationGTELTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationGTELTE {
    return new DurationGTELTE().fromJsonString(jsonString, options);
  }

  static equals(a: DurationGTELTE | PlainMessage<DurationGTELTE> | undefined, b: DurationGTELTE | PlainMessage<DurationGTELTE> | undefined): boolean {
    return proto3.util.equals(DurationGTELTE, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.DurationExGTELTE
 */
export class DurationExGTELTE extends Message<DurationExGTELTE> {
  /**
   * @generated from field: google.protobuf.Duration val = 1;
   */
  val?: Duration;

  constructor(data?: PartialMessage<DurationExGTELTE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationExGTELTE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationExGTELTE {
    return new DurationExGTELTE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationExGTELTE {
    return new DurationExGTELTE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationExGTELTE {
    return new DurationExGTELTE().fromJsonString(jsonString, options);
  }

  static equals(a: DurationExGTELTE | PlainMessage<DurationExGTELTE> | undefined, b: DurationExGTELTE | PlainMessage<DurationExGTELTE> | undefined): boolean {
    return proto3.util.equals(DurationExGTELTE, a, b);
  }
}

/**
 * Regression for earlier bug where missing Duration field would short circuit
 * evaluation in C++.
 *
 * @generated from message tests.harness.cases.DurationFieldWithOtherFields
 */
export class DurationFieldWithOtherFields extends Message<DurationFieldWithOtherFields> {
  /**
   * @generated from field: google.protobuf.Duration duration_val = 1;
   */
  durationVal?: Duration;

  /**
   * @generated from field: int32 int_val = 2;
   */
  intVal = 0;

  constructor(data?: PartialMessage<DurationFieldWithOtherFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.DurationFieldWithOtherFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "duration_val", kind: "message", T: Duration },
    { no: 2, name: "int_val", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationFieldWithOtherFields {
    return new DurationFieldWithOtherFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationFieldWithOtherFields {
    return new DurationFieldWithOtherFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationFieldWithOtherFields {
    return new DurationFieldWithOtherFields().fromJsonString(jsonString, options);
  }

  static equals(a: DurationFieldWithOtherFields | PlainMessage<DurationFieldWithOtherFields> | undefined, b: DurationFieldWithOtherFields | PlainMessage<DurationFieldWithOtherFields> | undefined): boolean {
    return proto3.util.equals(DurationFieldWithOtherFields, a, b);
  }
}

