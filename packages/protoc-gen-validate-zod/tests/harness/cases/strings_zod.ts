// @generated by protoc-gen-validate-zod v0.0.1-dev with parameter "target=ts"
// @generated from file tests/harness/cases/strings.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { z } from "zod";
import {
  bytesLength,
  bytesMaxLength,
  bytesMinLength,
  isIn,
  isNotIn,
  oneof,
  regexp,
  stringContains,
  stringNotContains,
} from "protobuf-zod";

/**
 * @generated from message tests.harness.cases.StringNone
 */
export const StringNoneSchema = z.object({
  /**
   * @generated from field: string val = 1;
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringConst
 */
export const StringConstSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"const":"foo"}}
   */
  val: z.string().and(z.literal("foo")),
});

/**
 * @generated from message tests.harness.cases.StringIn
 */
export const StringInSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"in":["bar","baz"]}}
   */
  val: z.string().refine(isIn(["bar", "baz"])),
});

/**
 * @generated from message tests.harness.cases.StringNotIn
 */
export const StringNotInSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"notIn":["fizz","buzz"]}}
   */
  val: z.string().refine(isNotIn(["fizz", "buzz"])),
});

/**
 * @generated from message tests.harness.cases.StringLen
 */
export const StringLenSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"len":"3"}}
   */
  val: z.string().length(3),
});

/**
 * @generated from message tests.harness.cases.StringMinLen
 */
export const StringMinLenSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minLen":"3"}}
   */
  val: z.string().min(3),
});

/**
 * @generated from message tests.harness.cases.StringMaxLen
 */
export const StringMaxLenSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"maxLen":"5"}}
   */
  val: z.string().max(5),
});

/**
 * @generated from message tests.harness.cases.StringMinMaxLen
 */
export const StringMinMaxLenSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minLen":"3","maxLen":"5"}}
   */
  val: z.string().min(3).max(5),
});

/**
 * @generated from message tests.harness.cases.StringEqualMinMaxLen
 */
export const StringEqualMinMaxLenSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minLen":"5","maxLen":"5"}}
   */
  val: z.string().min(5).max(5),
});

/**
 * @generated from message tests.harness.cases.StringLenBytes
 */
export const StringLenBytesSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"lenBytes":"4"}}
   */
  val: z.string().refine(bytesLength(4)),
});

/**
 * @generated from message tests.harness.cases.StringMinBytes
 */
export const StringMinBytesSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minBytes":"4"}}
   */
  val: z.string().refine(bytesMinLength(4)),
});

/**
 * @generated from message tests.harness.cases.StringMaxBytes
 */
export const StringMaxBytesSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"maxBytes":"8"}}
   */
  val: z.string().refine(bytesMaxLength(8)),
});

/**
 * @generated from message tests.harness.cases.StringMinMaxBytes
 */
export const StringMinMaxBytesSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minBytes":"4","maxBytes":"8"}}
   */
  val: z.string().refine(bytesMinLength(4)).refine(bytesMaxLength(8)),
});

/**
 * @generated from message tests.harness.cases.StringEqualMinMaxBytes
 */
export const StringEqualMinMaxBytesSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"minBytes":"4","maxBytes":"8"}}
   */
  val: z.string().refine(bytesMinLength(4)).refine(bytesMaxLength(8)),
});

/**
 * @generated from message tests.harness.cases.StringPattern
 */
export const StringPatternSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"pattern":"(?i)^[a-z0-9]+$"}}
   */
  val: z.string().regex(regexp("(?i)^[a-z0-9]+$")),
});

/**
 * @generated from message tests.harness.cases.StringPatternEscapes
 */
export const StringPatternEscapesSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"pattern":"\\* \\\\ \\w"}}
   */
  val: z.string().regex(regexp("\\* \\\\ \\w")),
});

/**
 * @generated from message tests.harness.cases.StringPrefix
 */
export const StringPrefixSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"prefix":"foo"}}
   */
  val: z.string().startsWith("foo"),
});

/**
 * @generated from message tests.harness.cases.StringContains
 */
export const StringContainsSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"contains":"bar"}}
   */
  val: z.string().refine(stringContains("bar")),
});

/**
 * @generated from message tests.harness.cases.StringNotContains
 */
export const StringNotContainsSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"notContains":"bar"}}
   */
  val: z.string().refine(stringNotContains("bar")),
});

/**
 * @generated from message tests.harness.cases.StringSuffix
 */
export const StringSuffixSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"suffix":"baz"}}
   */
  val: z.string().endsWith("baz"),
});

/**
 * @generated from message tests.harness.cases.StringEmail
 */
export const StringEmailSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"email":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringAddress
 */
export const StringAddressSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"address":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringHostname
 */
export const StringHostnameSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"hostname":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringIP
 */
export const StringIPSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"ip":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringIPv4
 */
export const StringIPv4Schema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"ipv4":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringIPv6
 */
export const StringIPv6Schema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"ipv6":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringURI
 */
export const StringURISchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"uri":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringURIRef
 */
export const StringURIRefSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"uriRef":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringUUID
 */
export const StringUUIDSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"uuid":true}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringHttpHeaderName
 */
export const StringHttpHeaderNameSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"wellKnownRegex":"HTTP_HEADER_NAME"}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringHttpHeaderValue
 */
export const StringHttpHeaderValueSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"wellKnownRegex":"HTTP_HEADER_VALUE"}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringValidHeader
 */
export const StringValidHeaderSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"wellKnownRegex":"HTTP_HEADER_VALUE","strict":false}}
   */
  val: z.string(),
});

/**
 * @generated from message tests.harness.cases.StringUUIDIgnore
 */
export const StringUUIDIgnoreSchema = z.object({
  /**
   * @generated from field: string val = 1;
   * @validate  {"string":{"uuid":true,"ignoreEmpty":true}}
   */
  val: z.literal("").or(z.string()),
});

/**
 * @generated from message tests.harness.cases.StringInOneOf
 */
export const StringInOneOfSchema = z.object({
  /**
   * @generated from oneof tests.harness.cases.StringInOneOf.foo
   */
  foo: oneof([
    z.object({
      case: z.literal(undefined),
      value: z.literal(undefined).nullish(),
    }),
    z.object({
      /**
       * @generated from field: string bar = 1;
       * @validate  {"string":{"in":["a","b"]}}
       */
      case: z.literal("bar"),
      value: z.string().refine(isIn(["a", "b"])),
    }),
  ]).nullish(),
});
