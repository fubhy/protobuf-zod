// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/messages.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message as Message$1, proto3, protoInt64} from "@bufbuild/protobuf";
import {Embed} from "./other_package/embed_pb.js";

/**
 * @generated from message tests.harness.cases.TestMsg
 */
export class TestMsg extends Message$1<TestMsg> {
  /**
   * @generated from field: string const = 1;
   */
  const = "";

  /**
   * @generated from field: tests.harness.cases.TestMsg nested = 2;
   */
  nested?: TestMsg;

  constructor(data?: PartialMessage<TestMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.TestMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nested", kind: "message", T: TestMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMsg {
    return new TestMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMsg {
    return new TestMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMsg {
    return new TestMsg().fromJsonString(jsonString, options);
  }

  static equals(a: TestMsg | PlainMessage<TestMsg> | undefined, b: TestMsg | PlainMessage<TestMsg> | undefined): boolean {
    return proto3.util.equals(TestMsg, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageNone
 */
export class MessageNone extends Message$1<MessageNone> {
  /**
   * @generated from field: tests.harness.cases.MessageNone.NoneMsg val = 1;
   */
  val?: MessageNone_NoneMsg;

  constructor(data?: PartialMessage<MessageNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: MessageNone_NoneMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageNone {
    return new MessageNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageNone {
    return new MessageNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageNone {
    return new MessageNone().fromJsonString(jsonString, options);
  }

  static equals(a: MessageNone | PlainMessage<MessageNone> | undefined, b: MessageNone | PlainMessage<MessageNone> | undefined): boolean {
    return proto3.util.equals(MessageNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageNone.NoneMsg
 */
export class MessageNone_NoneMsg extends Message$1<MessageNone_NoneMsg> {
  constructor(data?: PartialMessage<MessageNone_NoneMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageNone.NoneMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageNone_NoneMsg {
    return new MessageNone_NoneMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageNone_NoneMsg {
    return new MessageNone_NoneMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageNone_NoneMsg {
    return new MessageNone_NoneMsg().fromJsonString(jsonString, options);
  }

  static equals(a: MessageNone_NoneMsg | PlainMessage<MessageNone_NoneMsg> | undefined, b: MessageNone_NoneMsg | PlainMessage<MessageNone_NoneMsg> | undefined): boolean {
    return proto3.util.equals(MessageNone_NoneMsg, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageDisabled
 */
export class MessageDisabled extends Message$1<MessageDisabled> {
  /**
   * @generated from field: uint64 val = 1;
   */
  val = protoInt64.zero;

  constructor(data?: PartialMessage<MessageDisabled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageDisabled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageDisabled {
    return new MessageDisabled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageDisabled {
    return new MessageDisabled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageDisabled {
    return new MessageDisabled().fromJsonString(jsonString, options);
  }

  static equals(a: MessageDisabled | PlainMessage<MessageDisabled> | undefined, b: MessageDisabled | PlainMessage<MessageDisabled> | undefined): boolean {
    return proto3.util.equals(MessageDisabled, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageIgnored
 */
export class MessageIgnored extends Message$1<MessageIgnored> {
  /**
   * @generated from field: uint64 val = 1;
   */
  val = protoInt64.zero;

  constructor(data?: PartialMessage<MessageIgnored>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageIgnored";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageIgnored {
    return new MessageIgnored().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageIgnored {
    return new MessageIgnored().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageIgnored {
    return new MessageIgnored().fromJsonString(jsonString, options);
  }

  static equals(a: MessageIgnored | PlainMessage<MessageIgnored> | undefined, b: MessageIgnored | PlainMessage<MessageIgnored> | undefined): boolean {
    return proto3.util.equals(MessageIgnored, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: tests.harness.cases.TestMsg val = 1;
   */
  val?: TestMsg;

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: TestMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageCrossPackage
 */
export class MessageCrossPackage extends Message$1<MessageCrossPackage> {
  /**
   * @generated from field: tests.harness.cases.other_package.Embed val = 1;
   */
  val?: Embed;

  constructor(data?: PartialMessage<MessageCrossPackage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageCrossPackage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Embed },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageCrossPackage {
    return new MessageCrossPackage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageCrossPackage {
    return new MessageCrossPackage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageCrossPackage {
    return new MessageCrossPackage().fromJsonString(jsonString, options);
  }

  static equals(a: MessageCrossPackage | PlainMessage<MessageCrossPackage> | undefined, b: MessageCrossPackage | PlainMessage<MessageCrossPackage> | undefined): boolean {
    return proto3.util.equals(MessageCrossPackage, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageSkip
 */
export class MessageSkip extends Message$1<MessageSkip> {
  /**
   * @generated from field: tests.harness.cases.TestMsg val = 1;
   */
  val?: TestMsg;

  constructor(data?: PartialMessage<MessageSkip>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageSkip";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: TestMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageSkip {
    return new MessageSkip().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageSkip {
    return new MessageSkip().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageSkip {
    return new MessageSkip().fromJsonString(jsonString, options);
  }

  static equals(a: MessageSkip | PlainMessage<MessageSkip> | undefined, b: MessageSkip | PlainMessage<MessageSkip> | undefined): boolean {
    return proto3.util.equals(MessageSkip, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageRequired
 */
export class MessageRequired extends Message$1<MessageRequired> {
  /**
   * @generated from field: tests.harness.cases.TestMsg val = 1;
   */
  val?: TestMsg;

  constructor(data?: PartialMessage<MessageRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: TestMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequired {
    return new MessageRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequired {
    return new MessageRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequired {
    return new MessageRequired().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequired | PlainMessage<MessageRequired> | undefined, b: MessageRequired | PlainMessage<MessageRequired> | undefined): boolean {
    return proto3.util.equals(MessageRequired, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageRequiredButOptional
 */
export class MessageRequiredButOptional extends Message$1<MessageRequiredButOptional> {
  /**
   * @generated from field: optional tests.harness.cases.TestMsg val = 1;
   */
  val?: TestMsg;

  constructor(data?: PartialMessage<MessageRequiredButOptional>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageRequiredButOptional";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: TestMsg, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequiredButOptional {
    return new MessageRequiredButOptional().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequiredButOptional {
    return new MessageRequiredButOptional().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequiredButOptional {
    return new MessageRequiredButOptional().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequiredButOptional | PlainMessage<MessageRequiredButOptional> | undefined, b: MessageRequiredButOptional | PlainMessage<MessageRequiredButOptional> | undefined): boolean {
    return proto3.util.equals(MessageRequiredButOptional, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageRequiredOneof
 */
export class MessageRequiredOneof extends Message$1<MessageRequiredOneof> {
  /**
   * @generated from oneof tests.harness.cases.MessageRequiredOneof.one
   */
  one: {
    /**
     * @generated from field: tests.harness.cases.TestMsg val = 1;
     */
    value: TestMsg;
    case: "val";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MessageRequiredOneof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageRequiredOneof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: TestMsg, oneof: "one" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequiredOneof {
    return new MessageRequiredOneof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequiredOneof {
    return new MessageRequiredOneof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequiredOneof {
    return new MessageRequiredOneof().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequiredOneof | PlainMessage<MessageRequiredOneof> | undefined, b: MessageRequiredOneof | PlainMessage<MessageRequiredOneof> | undefined): boolean {
    return proto3.util.equals(MessageRequiredOneof, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.MessageWith3dInside
 */
export class MessageWith3dInside extends Message$1<MessageWith3dInside> {
  constructor(data?: PartialMessage<MessageWith3dInside>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.MessageWith3dInside";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageWith3dInside {
    return new MessageWith3dInside().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageWith3dInside {
    return new MessageWith3dInside().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageWith3dInside {
    return new MessageWith3dInside().fromJsonString(jsonString, options);
  }

  static equals(a: MessageWith3dInside | PlainMessage<MessageWith3dInside> | undefined, b: MessageWith3dInside | PlainMessage<MessageWith3dInside> | undefined): boolean {
    return proto3.util.equals(MessageWith3dInside, a, b);
  }
}

