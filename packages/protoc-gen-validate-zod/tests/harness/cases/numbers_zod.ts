// @generated by protoc-gen-validate-zod v0.0.1-dev with parameter "target=ts"
// @generated from file tests/harness/cases/numbers.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { z } from "zod";
import {
  double,
  fixed32,
  fixed64,
  float,
  int32,
  int64,
  isIn,
  isNotIn,
  numberGt,
  numberGte,
  numberInsideGteLte,
  numberInsideGtLt,
  numberLt,
  numberLte,
  numberOutsideGteLte,
  numberOutsideGtLt,
  sfixed32,
  sfixed64,
  sint32,
  sint64,
  uint32,
  uint64,
} from "protobuf-zod";
import { protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.FloatNone
 */
export const FloatNoneSchema = z.object({
  /**
   * @generated from field: float val = 1;
   */
  val: float,
});

/**
 * @generated from message tests.harness.cases.FloatConst
 */
export const FloatConstSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"const":1.2300000190734863}}
   */
  val: float.and(z.literal(1.2300000190734863)),
});

/**
 * @generated from message tests.harness.cases.FloatIn
 */
export const FloatInSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"in":[4.559999942779541,7.889999866485596]}}
   */
  val: float.refine(isIn([4.559999942779541, 7.889999866485596])),
});

/**
 * @generated from message tests.harness.cases.FloatNotIn
 */
export const FloatNotInSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"notIn":[0]}}
   */
  val: float.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.FloatLT
 */
export const FloatLTSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lt":0}}
   */
  val: float.refine(numberLt(0)),
});

/**
 * @generated from message tests.harness.cases.FloatLTE
 */
export const FloatLTESchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lte":64}}
   */
  val: float.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.FloatGT
 */
export const FloatGTSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"gt":16}}
   */
  val: float.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.FloatGTE
 */
export const FloatGTESchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"gte":8}}
   */
  val: float.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.FloatGTLT
 */
export const FloatGTLTSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lt":10,"gt":0}}
   */
  val: float.refine(numberInsideGtLt(0, 10)),
});

/**
 * @generated from message tests.harness.cases.FloatExLTGT
 */
export const FloatExLTGTSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lt":0,"gt":10}}
   */
  val: float.refine(numberOutsideGtLt(10, 0)),
});

/**
 * @generated from message tests.harness.cases.FloatGTELTE
 */
export const FloatGTELTESchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lte":256,"gte":128}}
   */
  val: float.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.FloatExGTELTE
 */
export const FloatExGTELTESchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lte":128,"gte":256}}
   */
  val: float.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.FloatIgnore
 */
export const FloatIgnoreSchema = z.object({
  /**
   * @generated from field: float val = 1;
   * @validate  {"float":{"lte":256,"gte":128,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(float.refine(numberInsideGteLte(128, 256))),
});

/**
 * @generated from message tests.harness.cases.DoubleNone
 */
export const DoubleNoneSchema = z.object({
  /**
   * @generated from field: double val = 1;
   */
  val: double,
});

/**
 * @generated from message tests.harness.cases.DoubleConst
 */
export const DoubleConstSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"const":1.23}}
   */
  val: double.and(z.literal(1.23)),
});

/**
 * @generated from message tests.harness.cases.DoubleIn
 */
export const DoubleInSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"in":[4.56,7.89]}}
   */
  val: double.refine(isIn([4.56, 7.89])),
});

/**
 * @generated from message tests.harness.cases.DoubleNotIn
 */
export const DoubleNotInSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"notIn":[0]}}
   */
  val: double.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.DoubleLT
 */
export const DoubleLTSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lt":0}}
   */
  val: double.refine(numberLt(0)),
});

/**
 * @generated from message tests.harness.cases.DoubleLTE
 */
export const DoubleLTESchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lte":64}}
   */
  val: double.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.DoubleGT
 */
export const DoubleGTSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"gt":16}}
   */
  val: double.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.DoubleGTE
 */
export const DoubleGTESchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"gte":8}}
   */
  val: double.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.DoubleGTLT
 */
export const DoubleGTLTSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lt":10,"gt":0}}
   */
  val: double.refine(numberInsideGtLt(0, 10)),
});

/**
 * @generated from message tests.harness.cases.DoubleExLTGT
 */
export const DoubleExLTGTSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lt":0,"gt":10}}
   */
  val: double.refine(numberOutsideGtLt(10, 0)),
});

/**
 * @generated from message tests.harness.cases.DoubleGTELTE
 */
export const DoubleGTELTESchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lte":256,"gte":128}}
   */
  val: double.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.DoubleExGTELTE
 */
export const DoubleExGTELTESchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lte":128,"gte":256}}
   */
  val: double.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.DoubleIgnore
 */
export const DoubleIgnoreSchema = z.object({
  /**
   * @generated from field: double val = 1;
   * @validate  {"double":{"lte":128,"gte":256,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(double.refine(numberOutsideGteLte(256, 128))),
});

/**
 * @generated from message tests.harness.cases.Int32None
 */
export const Int32NoneSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   */
  val: int32,
});

/**
 * @generated from message tests.harness.cases.Int32Const
 */
export const Int32ConstSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"const":1}}
   */
  val: int32.and(z.literal(1)),
});

/**
 * @generated from message tests.harness.cases.Int32In
 */
export const Int32InSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"in":[2,3]}}
   */
  val: int32.refine(isIn([2, 3])),
});

/**
 * @generated from message tests.harness.cases.Int32NotIn
 */
export const Int32NotInSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"notIn":[0]}}
   */
  val: int32.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.Int32LT
 */
export const Int32LTSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lt":0}}
   */
  val: int32.refine(numberLt(0)),
});

/**
 * @generated from message tests.harness.cases.Int32LTE
 */
export const Int32LTESchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lte":64}}
   */
  val: int32.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.Int32GT
 */
export const Int32GTSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"gt":16}}
   */
  val: int32.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.Int32GTE
 */
export const Int32GTESchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"gte":8}}
   */
  val: int32.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.Int32GTLT
 */
export const Int32GTLTSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lt":10,"gt":0}}
   */
  val: int32.refine(numberInsideGtLt(0, 10)),
});

/**
 * @generated from message tests.harness.cases.Int32ExLTGT
 */
export const Int32ExLTGTSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lt":0,"gt":10}}
   */
  val: int32.refine(numberOutsideGtLt(10, 0)),
});

/**
 * @generated from message tests.harness.cases.Int32GTELTE
 */
export const Int32GTELTESchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lte":256,"gte":128}}
   */
  val: int32.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.Int32ExGTELTE
 */
export const Int32ExGTELTESchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lte":128,"gte":256}}
   */
  val: int32.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.Int32Ignore
 */
export const Int32IgnoreSchema = z.object({
  /**
   * @generated from field: int32 val = 1;
   * @validate  {"int32":{"lte":128,"gte":256,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(int32.refine(numberOutsideGteLte(256, 128))),
});

/**
 * @generated from message tests.harness.cases.Int64None
 */
export const Int64NoneSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   */
  val: int64,
});

/**
 * @generated from message tests.harness.cases.Int64Const
 */
export const Int64ConstSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"const":"1"}}
   */
  val: int64.and(z.literal(protoInt64.parse("1"))),
});

/**
 * @generated from message tests.harness.cases.Int64In
 */
export const Int64InSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"in":["2","3"]}}
   */
  val: int64.refine(isIn([protoInt64.parse("2"), protoInt64.parse("3")])),
});

/**
 * @generated from message tests.harness.cases.Int64NotIn
 */
export const Int64NotInSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"notIn":["0"]}}
   */
  val: int64.refine(isNotIn([protoInt64.zero])),
});

/**
 * @generated from message tests.harness.cases.Int64LT
 */
export const Int64LTSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lt":"0"}}
   */
  val: int64.refine(numberLt(protoInt64.zero)),
});

/**
 * @generated from message tests.harness.cases.Int64LTE
 */
export const Int64LTESchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lte":"64"}}
   */
  val: int64.refine(numberLte(protoInt64.parse("64"))),
});

/**
 * @generated from message tests.harness.cases.Int64GT
 */
export const Int64GTSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"gt":"16"}}
   */
  val: int64.refine(numberGt(protoInt64.parse("16"))),
});

/**
 * @generated from message tests.harness.cases.Int64GTE
 */
export const Int64GTESchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"gte":"8"}}
   */
  val: int64.refine(numberGte(protoInt64.parse("8"))),
});

/**
 * @generated from message tests.harness.cases.Int64GTLT
 */
export const Int64GTLTSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lt":"10","gt":"0"}}
   */
  val: int64.refine(numberInsideGtLt(protoInt64.zero, protoInt64.parse("10"))),
});

/**
 * @generated from message tests.harness.cases.Int64ExLTGT
 */
export const Int64ExLTGTSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lt":"0","gt":"10"}}
   */
  val: int64.refine(numberOutsideGtLt(protoInt64.parse("10"), protoInt64.zero)),
});

/**
 * @generated from message tests.harness.cases.Int64GTELTE
 */
export const Int64GTELTESchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lte":"256","gte":"128"}}
   */
  val: int64.refine(numberInsideGteLte(protoInt64.parse("128"), protoInt64.parse("256"))),
});

/**
 * @generated from message tests.harness.cases.Int64ExGTELTE
 */
export const Int64ExGTELTESchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lte":"128","gte":"256"}}
   */
  val: int64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128"))),
});

/**
 * @generated from message tests.harness.cases.Int64Ignore
 */
export const Int64IgnoreSchema = z.object({
  /**
   * @generated from field: int64 val = 1;
   * @validate  {"int64":{"lte":"128","gte":"256","ignoreEmpty":true}}
   */
  val: z
    .literal(protoInt64.zero)
    .or(int64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128")))),
});

/**
 * @generated from message tests.harness.cases.UInt32None
 */
export const UInt32NoneSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   */
  val: uint32,
});

/**
 * @generated from message tests.harness.cases.UInt32Const
 */
export const UInt32ConstSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"const":1}}
   */
  val: uint32.and(z.literal(1)),
});

/**
 * @generated from message tests.harness.cases.UInt32In
 */
export const UInt32InSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"in":[2,3]}}
   */
  val: uint32.refine(isIn([2, 3])),
});

/**
 * @generated from message tests.harness.cases.UInt32NotIn
 */
export const UInt32NotInSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"notIn":[0]}}
   */
  val: uint32.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.UInt32LT
 */
export const UInt32LTSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lt":5}}
   */
  val: uint32.refine(numberLt(5)),
});

/**
 * @generated from message tests.harness.cases.UInt32LTE
 */
export const UInt32LTESchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lte":64}}
   */
  val: uint32.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.UInt32GT
 */
export const UInt32GTSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"gt":16}}
   */
  val: uint32.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.UInt32GTE
 */
export const UInt32GTESchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"gte":8}}
   */
  val: uint32.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.UInt32GTLT
 */
export const UInt32GTLTSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lt":10,"gt":5}}
   */
  val: uint32.refine(numberInsideGtLt(5, 10)),
});

/**
 * @generated from message tests.harness.cases.UInt32ExLTGT
 */
export const UInt32ExLTGTSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lt":5,"gt":10}}
   */
  val: uint32.refine(numberOutsideGtLt(10, 5)),
});

/**
 * @generated from message tests.harness.cases.UInt32GTELTE
 */
export const UInt32GTELTESchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lte":256,"gte":128}}
   */
  val: uint32.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.UInt32ExGTELTE
 */
export const UInt32ExGTELTESchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lte":128,"gte":256}}
   */
  val: uint32.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.UInt32Ignore
 */
export const UInt32IgnoreSchema = z.object({
  /**
   * @generated from field: uint32 val = 1;
   * @validate  {"uint32":{"lte":128,"gte":256,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(uint32.refine(numberOutsideGteLte(256, 128))),
});

/**
 * @generated from message tests.harness.cases.UInt64None
 */
export const UInt64NoneSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   */
  val: uint64,
});

/**
 * @generated from message tests.harness.cases.UInt64Const
 */
export const UInt64ConstSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"const":"1"}}
   */
  val: uint64.and(z.literal(protoInt64.parse("1"))),
});

/**
 * @generated from message tests.harness.cases.UInt64In
 */
export const UInt64InSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"in":["2","3"]}}
   */
  val: uint64.refine(isIn([protoInt64.parse("2"), protoInt64.parse("3")])),
});

/**
 * @generated from message tests.harness.cases.UInt64NotIn
 */
export const UInt64NotInSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"notIn":["0"]}}
   */
  val: uint64.refine(isNotIn([protoInt64.zero])),
});

/**
 * @generated from message tests.harness.cases.UInt64LT
 */
export const UInt64LTSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lt":"5"}}
   */
  val: uint64.refine(numberLt(protoInt64.parse("5"))),
});

/**
 * @generated from message tests.harness.cases.UInt64LTE
 */
export const UInt64LTESchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lte":"64"}}
   */
  val: uint64.refine(numberLte(protoInt64.parse("64"))),
});

/**
 * @generated from message tests.harness.cases.UInt64GT
 */
export const UInt64GTSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"gt":"16"}}
   */
  val: uint64.refine(numberGt(protoInt64.parse("16"))),
});

/**
 * @generated from message tests.harness.cases.UInt64GTE
 */
export const UInt64GTESchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"gte":"8"}}
   */
  val: uint64.refine(numberGte(protoInt64.parse("8"))),
});

/**
 * @generated from message tests.harness.cases.UInt64GTLT
 */
export const UInt64GTLTSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lt":"10","gt":"5"}}
   */
  val: uint64.refine(numberInsideGtLt(protoInt64.parse("5"), protoInt64.parse("10"))),
});

/**
 * @generated from message tests.harness.cases.UInt64ExLTGT
 */
export const UInt64ExLTGTSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lt":"5","gt":"10"}}
   */
  val: uint64.refine(numberOutsideGtLt(protoInt64.parse("10"), protoInt64.parse("5"))),
});

/**
 * @generated from message tests.harness.cases.UInt64GTELTE
 */
export const UInt64GTELTESchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lte":"256","gte":"128"}}
   */
  val: uint64.refine(numberInsideGteLte(protoInt64.parse("128"), protoInt64.parse("256"))),
});

/**
 * @generated from message tests.harness.cases.UInt64ExGTELTE
 */
export const UInt64ExGTELTESchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lte":"128","gte":"256"}}
   */
  val: uint64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128"))),
});

/**
 * @generated from message tests.harness.cases.UInt64Ignore
 */
export const UInt64IgnoreSchema = z.object({
  /**
   * @generated from field: uint64 val = 1;
   * @validate  {"uint64":{"lte":"128","gte":"256","ignoreEmpty":true}}
   */
  val: z
    .literal(protoInt64.zero)
    .or(uint64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128")))),
});

/**
 * @generated from message tests.harness.cases.SInt32None
 */
export const SInt32NoneSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   */
  val: sint32,
});

/**
 * @generated from message tests.harness.cases.SInt32Const
 */
export const SInt32ConstSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"const":1}}
   */
  val: sint32.and(z.literal(1)),
});

/**
 * @generated from message tests.harness.cases.SInt32In
 */
export const SInt32InSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"in":[2,3]}}
   */
  val: sint32.refine(isIn([2, 3])),
});

/**
 * @generated from message tests.harness.cases.SInt32NotIn
 */
export const SInt32NotInSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"notIn":[0]}}
   */
  val: sint32.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.SInt32LT
 */
export const SInt32LTSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lt":0}}
   */
  val: sint32.refine(numberLt(0)),
});

/**
 * @generated from message tests.harness.cases.SInt32LTE
 */
export const SInt32LTESchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lte":64}}
   */
  val: sint32.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.SInt32GT
 */
export const SInt32GTSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"gt":16}}
   */
  val: sint32.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.SInt32GTE
 */
export const SInt32GTESchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"gte":8}}
   */
  val: sint32.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.SInt32GTLT
 */
export const SInt32GTLTSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lt":10,"gt":0}}
   */
  val: sint32.refine(numberInsideGtLt(0, 10)),
});

/**
 * @generated from message tests.harness.cases.SInt32ExLTGT
 */
export const SInt32ExLTGTSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lt":0,"gt":10}}
   */
  val: sint32.refine(numberOutsideGtLt(10, 0)),
});

/**
 * @generated from message tests.harness.cases.SInt32GTELTE
 */
export const SInt32GTELTESchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lte":256,"gte":128}}
   */
  val: sint32.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.SInt32ExGTELTE
 */
export const SInt32ExGTELTESchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lte":128,"gte":256}}
   */
  val: sint32.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.SInt32Ignore
 */
export const SInt32IgnoreSchema = z.object({
  /**
   * @generated from field: sint32 val = 1;
   * @validate  {"sint32":{"lte":128,"gte":256,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(sint32.refine(numberOutsideGteLte(256, 128))),
});

/**
 * @generated from message tests.harness.cases.SInt64None
 */
export const SInt64NoneSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   */
  val: sint64,
});

/**
 * @generated from message tests.harness.cases.SInt64Const
 */
export const SInt64ConstSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"const":"1"}}
   */
  val: sint64.and(z.literal(protoInt64.parse("1"))),
});

/**
 * @generated from message tests.harness.cases.SInt64In
 */
export const SInt64InSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"in":["2","3"]}}
   */
  val: sint64.refine(isIn([protoInt64.parse("2"), protoInt64.parse("3")])),
});

/**
 * @generated from message tests.harness.cases.SInt64NotIn
 */
export const SInt64NotInSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"notIn":["0"]}}
   */
  val: sint64.refine(isNotIn([protoInt64.zero])),
});

/**
 * @generated from message tests.harness.cases.SInt64LT
 */
export const SInt64LTSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lt":"0"}}
   */
  val: sint64.refine(numberLt(protoInt64.zero)),
});

/**
 * @generated from message tests.harness.cases.SInt64LTE
 */
export const SInt64LTESchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lte":"64"}}
   */
  val: sint64.refine(numberLte(protoInt64.parse("64"))),
});

/**
 * @generated from message tests.harness.cases.SInt64GT
 */
export const SInt64GTSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"gt":"16"}}
   */
  val: sint64.refine(numberGt(protoInt64.parse("16"))),
});

/**
 * @generated from message tests.harness.cases.SInt64GTE
 */
export const SInt64GTESchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"gte":"8"}}
   */
  val: sint64.refine(numberGte(protoInt64.parse("8"))),
});

/**
 * @generated from message tests.harness.cases.SInt64GTLT
 */
export const SInt64GTLTSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lt":"10","gt":"0"}}
   */
  val: sint64.refine(numberInsideGtLt(protoInt64.zero, protoInt64.parse("10"))),
});

/**
 * @generated from message tests.harness.cases.SInt64ExLTGT
 */
export const SInt64ExLTGTSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lt":"0","gt":"10"}}
   */
  val: sint64.refine(numberOutsideGtLt(protoInt64.parse("10"), protoInt64.zero)),
});

/**
 * @generated from message tests.harness.cases.SInt64GTELTE
 */
export const SInt64GTELTESchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lte":"256","gte":"128"}}
   */
  val: sint64.refine(numberInsideGteLte(protoInt64.parse("128"), protoInt64.parse("256"))),
});

/**
 * @generated from message tests.harness.cases.SInt64ExGTELTE
 */
export const SInt64ExGTELTESchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lte":"128","gte":"256"}}
   */
  val: sint64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128"))),
});

/**
 * @generated from message tests.harness.cases.SInt64Ignore
 */
export const SInt64IgnoreSchema = z.object({
  /**
   * @generated from field: sint64 val = 1;
   * @validate  {"sint64":{"lte":"128","gte":"256","ignoreEmpty":true}}
   */
  val: z
    .literal(protoInt64.zero)
    .or(sint64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128")))),
});

/**
 * @generated from message tests.harness.cases.Fixed32None
 */
export const Fixed32NoneSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   */
  val: fixed32,
});

/**
 * @generated from message tests.harness.cases.Fixed32Const
 */
export const Fixed32ConstSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"const":1}}
   */
  val: fixed32.and(z.literal(1)),
});

/**
 * @generated from message tests.harness.cases.Fixed32In
 */
export const Fixed32InSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"in":[2,3]}}
   */
  val: fixed32.refine(isIn([2, 3])),
});

/**
 * @generated from message tests.harness.cases.Fixed32NotIn
 */
export const Fixed32NotInSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"notIn":[0]}}
   */
  val: fixed32.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.Fixed32LT
 */
export const Fixed32LTSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lt":5}}
   */
  val: fixed32.refine(numberLt(5)),
});

/**
 * @generated from message tests.harness.cases.Fixed32LTE
 */
export const Fixed32LTESchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lte":64}}
   */
  val: fixed32.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.Fixed32GT
 */
export const Fixed32GTSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"gt":16}}
   */
  val: fixed32.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.Fixed32GTE
 */
export const Fixed32GTESchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"gte":8}}
   */
  val: fixed32.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.Fixed32GTLT
 */
export const Fixed32GTLTSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lt":10,"gt":5}}
   */
  val: fixed32.refine(numberInsideGtLt(5, 10)),
});

/**
 * @generated from message tests.harness.cases.Fixed32ExLTGT
 */
export const Fixed32ExLTGTSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lt":5,"gt":10}}
   */
  val: fixed32.refine(numberOutsideGtLt(10, 5)),
});

/**
 * @generated from message tests.harness.cases.Fixed32GTELTE
 */
export const Fixed32GTELTESchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lte":256,"gte":128}}
   */
  val: fixed32.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.Fixed32ExGTELTE
 */
export const Fixed32ExGTELTESchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lte":128,"gte":256}}
   */
  val: fixed32.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.Fixed32Ignore
 */
export const Fixed32IgnoreSchema = z.object({
  /**
   * @generated from field: fixed32 val = 1;
   * @validate  {"fixed32":{"lte":128,"gte":256,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(fixed32.refine(numberOutsideGteLte(256, 128))),
});

/**
 * @generated from message tests.harness.cases.Fixed64None
 */
export const Fixed64NoneSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   */
  val: fixed64,
});

/**
 * @generated from message tests.harness.cases.Fixed64Const
 */
export const Fixed64ConstSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"const":"1"}}
   */
  val: fixed64.and(z.literal(protoInt64.parse("1"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64In
 */
export const Fixed64InSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"in":["2","3"]}}
   */
  val: fixed64.refine(isIn([protoInt64.parse("2"), protoInt64.parse("3")])),
});

/**
 * @generated from message tests.harness.cases.Fixed64NotIn
 */
export const Fixed64NotInSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"notIn":["0"]}}
   */
  val: fixed64.refine(isNotIn([protoInt64.zero])),
});

/**
 * @generated from message tests.harness.cases.Fixed64LT
 */
export const Fixed64LTSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lt":"5"}}
   */
  val: fixed64.refine(numberLt(protoInt64.parse("5"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64LTE
 */
export const Fixed64LTESchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lte":"64"}}
   */
  val: fixed64.refine(numberLte(protoInt64.parse("64"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64GT
 */
export const Fixed64GTSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"gt":"16"}}
   */
  val: fixed64.refine(numberGt(protoInt64.parse("16"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64GTE
 */
export const Fixed64GTESchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"gte":"8"}}
   */
  val: fixed64.refine(numberGte(protoInt64.parse("8"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64GTLT
 */
export const Fixed64GTLTSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lt":"10","gt":"5"}}
   */
  val: fixed64.refine(numberInsideGtLt(protoInt64.parse("5"), protoInt64.parse("10"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64ExLTGT
 */
export const Fixed64ExLTGTSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lt":"5","gt":"10"}}
   */
  val: fixed64.refine(numberOutsideGtLt(protoInt64.parse("10"), protoInt64.parse("5"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64GTELTE
 */
export const Fixed64GTELTESchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lte":"256","gte":"128"}}
   */
  val: fixed64.refine(numberInsideGteLte(protoInt64.parse("128"), protoInt64.parse("256"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64ExGTELTE
 */
export const Fixed64ExGTELTESchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lte":"128","gte":"256"}}
   */
  val: fixed64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128"))),
});

/**
 * @generated from message tests.harness.cases.Fixed64Ignore
 */
export const Fixed64IgnoreSchema = z.object({
  /**
   * @generated from field: fixed64 val = 1;
   * @validate  {"fixed64":{"lte":"128","gte":"256","ignoreEmpty":true}}
   */
  val: z
    .literal(protoInt64.zero)
    .or(fixed64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128")))),
});

/**
 * @generated from message tests.harness.cases.SFixed32None
 */
export const SFixed32NoneSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   */
  val: sfixed32,
});

/**
 * @generated from message tests.harness.cases.SFixed32Const
 */
export const SFixed32ConstSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"const":1}}
   */
  val: sfixed32.and(z.literal(1)),
});

/**
 * @generated from message tests.harness.cases.SFixed32In
 */
export const SFixed32InSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"in":[2,3]}}
   */
  val: sfixed32.refine(isIn([2, 3])),
});

/**
 * @generated from message tests.harness.cases.SFixed32NotIn
 */
export const SFixed32NotInSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"notIn":[0]}}
   */
  val: sfixed32.refine(isNotIn([0])),
});

/**
 * @generated from message tests.harness.cases.SFixed32LT
 */
export const SFixed32LTSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lt":0}}
   */
  val: sfixed32.refine(numberLt(0)),
});

/**
 * @generated from message tests.harness.cases.SFixed32LTE
 */
export const SFixed32LTESchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lte":64}}
   */
  val: sfixed32.refine(numberLte(64)),
});

/**
 * @generated from message tests.harness.cases.SFixed32GT
 */
export const SFixed32GTSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"gt":16}}
   */
  val: sfixed32.refine(numberGt(16)),
});

/**
 * @generated from message tests.harness.cases.SFixed32GTE
 */
export const SFixed32GTESchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"gte":8}}
   */
  val: sfixed32.refine(numberGte(8)),
});

/**
 * @generated from message tests.harness.cases.SFixed32GTLT
 */
export const SFixed32GTLTSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lt":10,"gt":0}}
   */
  val: sfixed32.refine(numberInsideGtLt(0, 10)),
});

/**
 * @generated from message tests.harness.cases.SFixed32ExLTGT
 */
export const SFixed32ExLTGTSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lt":0,"gt":10}}
   */
  val: sfixed32.refine(numberOutsideGtLt(10, 0)),
});

/**
 * @generated from message tests.harness.cases.SFixed32GTELTE
 */
export const SFixed32GTELTESchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lte":256,"gte":128}}
   */
  val: sfixed32.refine(numberInsideGteLte(128, 256)),
});

/**
 * @generated from message tests.harness.cases.SFixed32ExGTELTE
 */
export const SFixed32ExGTELTESchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lte":128,"gte":256}}
   */
  val: sfixed32.refine(numberOutsideGteLte(256, 128)),
});

/**
 * @generated from message tests.harness.cases.SFixed32Ignore
 */
export const SFixed32IgnoreSchema = z.object({
  /**
   * @generated from field: sfixed32 val = 1;
   * @validate  {"sfixed32":{"lte":128,"gte":256,"ignoreEmpty":true}}
   */
  val: z.literal(0).or(sfixed32.refine(numberOutsideGteLte(256, 128))),
});

/**
 * @generated from message tests.harness.cases.SFixed64None
 */
export const SFixed64NoneSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   */
  val: sfixed64,
});

/**
 * @generated from message tests.harness.cases.SFixed64Const
 */
export const SFixed64ConstSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"const":"1"}}
   */
  val: sfixed64.and(z.literal(protoInt64.parse("1"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64In
 */
export const SFixed64InSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"in":["2","3"]}}
   */
  val: sfixed64.refine(isIn([protoInt64.parse("2"), protoInt64.parse("3")])),
});

/**
 * @generated from message tests.harness.cases.SFixed64NotIn
 */
export const SFixed64NotInSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"notIn":["0"]}}
   */
  val: sfixed64.refine(isNotIn([protoInt64.zero])),
});

/**
 * @generated from message tests.harness.cases.SFixed64LT
 */
export const SFixed64LTSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lt":"0"}}
   */
  val: sfixed64.refine(numberLt(protoInt64.zero)),
});

/**
 * @generated from message tests.harness.cases.SFixed64LTE
 */
export const SFixed64LTESchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lte":"64"}}
   */
  val: sfixed64.refine(numberLte(protoInt64.parse("64"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64GT
 */
export const SFixed64GTSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"gt":"16"}}
   */
  val: sfixed64.refine(numberGt(protoInt64.parse("16"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64GTE
 */
export const SFixed64GTESchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"gte":"8"}}
   */
  val: sfixed64.refine(numberGte(protoInt64.parse("8"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64GTLT
 */
export const SFixed64GTLTSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lt":"10","gt":"0"}}
   */
  val: sfixed64.refine(numberInsideGtLt(protoInt64.zero, protoInt64.parse("10"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64ExLTGT
 */
export const SFixed64ExLTGTSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lt":"0","gt":"10"}}
   */
  val: sfixed64.refine(numberOutsideGtLt(protoInt64.parse("10"), protoInt64.zero)),
});

/**
 * @generated from message tests.harness.cases.SFixed64GTELTE
 */
export const SFixed64GTELTESchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lte":"256","gte":"128"}}
   */
  val: sfixed64.refine(numberInsideGteLte(protoInt64.parse("128"), protoInt64.parse("256"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64ExGTELTE
 */
export const SFixed64ExGTELTESchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lte":"128","gte":"256"}}
   */
  val: sfixed64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128"))),
});

/**
 * @generated from message tests.harness.cases.SFixed64Ignore
 */
export const SFixed64IgnoreSchema = z.object({
  /**
   * @generated from field: sfixed64 val = 1;
   * @validate  {"sfixed64":{"lte":"128","gte":"256","ignoreEmpty":true}}
   */
  val: z
    .literal(protoInt64.zero)
    .or(sfixed64.refine(numberOutsideGteLte(protoInt64.parse("256"), protoInt64.parse("128")))),
});

/**
 * @generated from message tests.harness.cases.Int64LTEOptional
 */
export const Int64LTEOptionalSchema = z.object({
  /**
   * @generated from field: optional int64 val = 1;
   * @validate  {"int64":{"lte":"64"}}
   */
  val: int64.refine(numberLte(protoInt64.parse("64"))).nullish(),
});
