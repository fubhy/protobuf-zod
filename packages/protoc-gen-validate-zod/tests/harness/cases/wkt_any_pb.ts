// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/wkt_any.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.AnyNone
 */
export class AnyNone extends Message<AnyNone> {
  /**
   * @generated from field: google.protobuf.Any val = 1;
   */
  val?: Any;

  constructor(data?: PartialMessage<AnyNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.AnyNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [{ no: 1, name: "val", kind: "message", T: Any }]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyNone {
    return new AnyNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyNone {
    return new AnyNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyNone {
    return new AnyNone().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnyNone | PlainMessage<AnyNone> | undefined,
    b: AnyNone | PlainMessage<AnyNone> | undefined
  ): boolean {
    return proto3.util.equals(AnyNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.AnyRequired
 */
export class AnyRequired extends Message<AnyRequired> {
  /**
   * @generated from field: google.protobuf.Any val = 1;
   */
  val?: Any;

  constructor(data?: PartialMessage<AnyRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.AnyRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [{ no: 1, name: "val", kind: "message", T: Any }]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyRequired {
    return new AnyRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyRequired {
    return new AnyRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyRequired {
    return new AnyRequired().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnyRequired | PlainMessage<AnyRequired> | undefined,
    b: AnyRequired | PlainMessage<AnyRequired> | undefined
  ): boolean {
    return proto3.util.equals(AnyRequired, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.AnyIn
 */
export class AnyIn extends Message<AnyIn> {
  /**
   * @generated from field: google.protobuf.Any val = 1;
   */
  val?: Any;

  constructor(data?: PartialMessage<AnyIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.AnyIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [{ no: 1, name: "val", kind: "message", T: Any }]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyIn {
    return new AnyIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyIn {
    return new AnyIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyIn {
    return new AnyIn().fromJsonString(jsonString, options);
  }

  static equals(a: AnyIn | PlainMessage<AnyIn> | undefined, b: AnyIn | PlainMessage<AnyIn> | undefined): boolean {
    return proto3.util.equals(AnyIn, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.AnyNotIn
 */
export class AnyNotIn extends Message<AnyNotIn> {
  /**
   * @generated from field: google.protobuf.Any val = 1;
   */
  val?: Any;

  constructor(data?: PartialMessage<AnyNotIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.AnyNotIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [{ no: 1, name: "val", kind: "message", T: Any }]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyNotIn {
    return new AnyNotIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyNotIn {
    return new AnyNotIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyNotIn {
    return new AnyNotIn().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnyNotIn | PlainMessage<AnyNotIn> | undefined,
    b: AnyNotIn | PlainMessage<AnyNotIn> | undefined
  ): boolean {
    return proto3.util.equals(AnyNotIn, a, b);
  }
}
