// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/cases/wkt_wrappers.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import {
  BoolValue,
  BytesValue,
  DoubleValue,
  FloatValue,
  Int32Value,
  Int64Value,
  Message,
  proto3,
  StringValue,
  UInt32Value,
  UInt64Value,
} from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.cases.WrapperNone
 */
export class WrapperNone extends Message<WrapperNone> {
  /**
   * @generated from field: google.protobuf.Int32Value val = 1;
   */
  val?: number;

  constructor(data?: PartialMessage<WrapperNone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperNone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperNone {
    return new WrapperNone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperNone {
    return new WrapperNone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperNone {
    return new WrapperNone().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperNone | PlainMessage<WrapperNone> | undefined,
    b: WrapperNone | PlainMessage<WrapperNone> | undefined
  ): boolean {
    return proto3.util.equals(WrapperNone, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperFloat
 */
export class WrapperFloat extends Message<WrapperFloat> {
  /**
   * @generated from field: google.protobuf.FloatValue val = 1;
   */
  val?: number;

  constructor(data?: PartialMessage<WrapperFloat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperFloat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: FloatValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperFloat {
    return new WrapperFloat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperFloat {
    return new WrapperFloat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperFloat {
    return new WrapperFloat().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperFloat | PlainMessage<WrapperFloat> | undefined,
    b: WrapperFloat | PlainMessage<WrapperFloat> | undefined
  ): boolean {
    return proto3.util.equals(WrapperFloat, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperDouble
 */
export class WrapperDouble extends Message<WrapperDouble> {
  /**
   * @generated from field: google.protobuf.DoubleValue val = 1;
   */
  val?: number;

  constructor(data?: PartialMessage<WrapperDouble>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperDouble";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: DoubleValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperDouble {
    return new WrapperDouble().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperDouble {
    return new WrapperDouble().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperDouble {
    return new WrapperDouble().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperDouble | PlainMessage<WrapperDouble> | undefined,
    b: WrapperDouble | PlainMessage<WrapperDouble> | undefined
  ): boolean {
    return proto3.util.equals(WrapperDouble, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperInt64
 */
export class WrapperInt64 extends Message<WrapperInt64> {
  /**
   * @generated from field: google.protobuf.Int64Value val = 1;
   */
  val?: bigint;

  constructor(data?: PartialMessage<WrapperInt64>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperInt64";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Int64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperInt64 {
    return new WrapperInt64().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperInt64 {
    return new WrapperInt64().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperInt64 {
    return new WrapperInt64().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperInt64 | PlainMessage<WrapperInt64> | undefined,
    b: WrapperInt64 | PlainMessage<WrapperInt64> | undefined
  ): boolean {
    return proto3.util.equals(WrapperInt64, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperInt32
 */
export class WrapperInt32 extends Message<WrapperInt32> {
  /**
   * @generated from field: google.protobuf.Int32Value val = 1;
   */
  val?: number;

  constructor(data?: PartialMessage<WrapperInt32>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperInt32";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperInt32 {
    return new WrapperInt32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperInt32 {
    return new WrapperInt32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperInt32 {
    return new WrapperInt32().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperInt32 | PlainMessage<WrapperInt32> | undefined,
    b: WrapperInt32 | PlainMessage<WrapperInt32> | undefined
  ): boolean {
    return proto3.util.equals(WrapperInt32, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperUInt64
 */
export class WrapperUInt64 extends Message<WrapperUInt64> {
  /**
   * @generated from field: google.protobuf.UInt64Value val = 1;
   */
  val?: bigint;

  constructor(data?: PartialMessage<WrapperUInt64>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperUInt64";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: UInt64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperUInt64 {
    return new WrapperUInt64().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperUInt64 {
    return new WrapperUInt64().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperUInt64 {
    return new WrapperUInt64().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperUInt64 | PlainMessage<WrapperUInt64> | undefined,
    b: WrapperUInt64 | PlainMessage<WrapperUInt64> | undefined
  ): boolean {
    return proto3.util.equals(WrapperUInt64, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperUInt32
 */
export class WrapperUInt32 extends Message<WrapperUInt32> {
  /**
   * @generated from field: google.protobuf.UInt32Value val = 1;
   */
  val?: number;

  constructor(data?: PartialMessage<WrapperUInt32>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperUInt32";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: UInt32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperUInt32 {
    return new WrapperUInt32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperUInt32 {
    return new WrapperUInt32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperUInt32 {
    return new WrapperUInt32().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperUInt32 | PlainMessage<WrapperUInt32> | undefined,
    b: WrapperUInt32 | PlainMessage<WrapperUInt32> | undefined
  ): boolean {
    return proto3.util.equals(WrapperUInt32, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperBool
 */
export class WrapperBool extends Message<WrapperBool> {
  /**
   * @generated from field: google.protobuf.BoolValue val = 1;
   */
  val?: boolean;

  constructor(data?: PartialMessage<WrapperBool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperBool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: BoolValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperBool {
    return new WrapperBool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperBool {
    return new WrapperBool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperBool {
    return new WrapperBool().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperBool | PlainMessage<WrapperBool> | undefined,
    b: WrapperBool | PlainMessage<WrapperBool> | undefined
  ): boolean {
    return proto3.util.equals(WrapperBool, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperString
 */
export class WrapperString extends Message<WrapperString> {
  /**
   * @generated from field: google.protobuf.StringValue val = 1;
   */
  val?: string;

  constructor(data?: PartialMessage<WrapperString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperString {
    return new WrapperString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperString {
    return new WrapperString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperString {
    return new WrapperString().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperString | PlainMessage<WrapperString> | undefined,
    b: WrapperString | PlainMessage<WrapperString> | undefined
  ): boolean {
    return proto3.util.equals(WrapperString, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperBytes
 */
export class WrapperBytes extends Message<WrapperBytes> {
  /**
   * @generated from field: google.protobuf.BytesValue val = 1;
   */
  val?: Uint8Array;

  constructor(data?: PartialMessage<WrapperBytes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperBytes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: BytesValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperBytes {
    return new WrapperBytes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperBytes {
    return new WrapperBytes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperBytes {
    return new WrapperBytes().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperBytes | PlainMessage<WrapperBytes> | undefined,
    b: WrapperBytes | PlainMessage<WrapperBytes> | undefined
  ): boolean {
    return proto3.util.equals(WrapperBytes, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperRequiredString
 */
export class WrapperRequiredString extends Message<WrapperRequiredString> {
  /**
   * @generated from field: google.protobuf.StringValue val = 1;
   */
  val?: string;

  constructor(data?: PartialMessage<WrapperRequiredString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperRequiredString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperRequiredString {
    return new WrapperRequiredString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperRequiredString {
    return new WrapperRequiredString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperRequiredString {
    return new WrapperRequiredString().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperRequiredString | PlainMessage<WrapperRequiredString> | undefined,
    b: WrapperRequiredString | PlainMessage<WrapperRequiredString> | undefined
  ): boolean {
    return proto3.util.equals(WrapperRequiredString, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperRequiredEmptyString
 */
export class WrapperRequiredEmptyString extends Message<WrapperRequiredEmptyString> {
  /**
   * @generated from field: google.protobuf.StringValue val = 1;
   */
  val?: string;

  constructor(data?: PartialMessage<WrapperRequiredEmptyString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperRequiredEmptyString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperRequiredEmptyString {
    return new WrapperRequiredEmptyString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperRequiredEmptyString {
    return new WrapperRequiredEmptyString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperRequiredEmptyString {
    return new WrapperRequiredEmptyString().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperRequiredEmptyString | PlainMessage<WrapperRequiredEmptyString> | undefined,
    b: WrapperRequiredEmptyString | PlainMessage<WrapperRequiredEmptyString> | undefined
  ): boolean {
    return proto3.util.equals(WrapperRequiredEmptyString, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperOptionalUuidString
 */
export class WrapperOptionalUuidString extends Message<WrapperOptionalUuidString> {
  /**
   * @generated from field: google.protobuf.StringValue val = 1;
   */
  val?: string;

  constructor(data?: PartialMessage<WrapperOptionalUuidString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperOptionalUuidString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperOptionalUuidString {
    return new WrapperOptionalUuidString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperOptionalUuidString {
    return new WrapperOptionalUuidString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperOptionalUuidString {
    return new WrapperOptionalUuidString().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperOptionalUuidString | PlainMessage<WrapperOptionalUuidString> | undefined,
    b: WrapperOptionalUuidString | PlainMessage<WrapperOptionalUuidString> | undefined
  ): boolean {
    return proto3.util.equals(WrapperOptionalUuidString, a, b);
  }
}

/**
 * @generated from message tests.harness.cases.WrapperRequiredFloat
 */
export class WrapperRequiredFloat extends Message<WrapperRequiredFloat> {
  /**
   * @generated from field: google.protobuf.FloatValue val = 1;
   */
  val?: number;

  constructor(data?: PartialMessage<WrapperRequiredFloat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.cases.WrapperRequiredFloat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "val", kind: "message", T: FloatValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WrapperRequiredFloat {
    return new WrapperRequiredFloat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WrapperRequiredFloat {
    return new WrapperRequiredFloat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WrapperRequiredFloat {
    return new WrapperRequiredFloat().fromJsonString(jsonString, options);
  }

  static equals(
    a: WrapperRequiredFloat | PlainMessage<WrapperRequiredFloat> | undefined,
    b: WrapperRequiredFloat | PlainMessage<WrapperRequiredFloat> | undefined
  ): boolean {
    return proto3.util.equals(WrapperRequiredFloat, a, b);
  }
}
