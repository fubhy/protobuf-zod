// @generated by protoc-gen-validate-zod-test v0.0.1-dev with parameter "target=ts,cases=tests/fixtures/cases.txt"
// @generated from file tests/harness/cases/kitchen_sink.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { expect, it } from "vitest";
import { KitchenSinkMessage } from "./kitchen_sink_pb.js";
import { KitchenSinkMessageSchema } from "./kitchen_sink_zod.js";

it("kitchensink - field - valid", () => {
  const message = KitchenSinkMessage.fromJson({
    val: {
      const: "abcd",
      intConst: 5,
      floatVal: 1,
      durVal: "3s",
      tsVal: "1970-01-01T00:00:17Z",
      floatConst: 7,
      doubleIn: 123,
      enumConst: "ComplexTWO",
      anyVal: { "@type": "type.googleapis.com/google.protobuf.Duration", value: "0s" },
      repTsVal: ["1970-01-01T00:00:03Z"],
      mapVal: { "-2": "b", "-1": "a" },
      bytesVal: "AJk=",
      x: "foobar",
    },
  });
  expect(message).toBeValid(KitchenSinkMessageSchema);
});

it("kitchensink - valid (unset)", () => {
  const message = KitchenSinkMessage.fromJson({});
  expect(message).toBeValid(KitchenSinkMessageSchema);
});

it("kitchensink - field - invalid", () => {
  const message = KitchenSinkMessage.fromJson({ val: {} });
  expect(message).toBeInvalid(KitchenSinkMessageSchema, 7);
});

it("kitchensink - field - embedded - invalid", () => {
  const message = KitchenSinkMessage.fromJson({ val: { another: {} } });
  expect(message).toBeInvalid(KitchenSinkMessageSchema, 14);
});

it("kitchensink - field - invalid (transitive)", () => {
  const message = KitchenSinkMessage.fromJson({ val: { const: "abcd", nested: {}, boolConst: true } });
  expect(message).toBeInvalid(KitchenSinkMessageSchema, 14);
});
