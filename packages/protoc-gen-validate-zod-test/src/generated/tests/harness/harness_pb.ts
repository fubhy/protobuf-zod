// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tests/harness/harness.proto (package tests.harness, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message tests.harness.TestCase
 */
export class TestCase extends Message<TestCase> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint32 failures = 2;
   */
  failures = 0;

  /**
   * @generated from field: google.protobuf.Any message = 3;
   */
  message?: Any;

  constructor(data?: PartialMessage<TestCase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tests.harness.TestCase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "failures", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "message", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestCase {
    return new TestCase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestCase {
    return new TestCase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestCase {
    return new TestCase().fromJsonString(jsonString, options);
  }

  static equals(
    a: TestCase | PlainMessage<TestCase> | undefined,
    b: TestCase | PlainMessage<TestCase> | undefined
  ): boolean {
    return proto3.util.equals(TestCase, a, b);
  }
}
